{"ast":null,"code":"import { commitMutation, graphql } from 'react-relay';\nimport { ConnectionHandler } from \"relay-runtime\";\nimport environment from '../Environment';\n\nvar mutation = function mutation() {\n  var node = require(\"./__generated__/AddAuthorMutation.graphql\");\n\n  if (node.hash && node.hash !== \"3c57fa8779e45e553c5b4fc08385df2c\") {\n    console.error(\"The definition of 'AddAuthorMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n  }\n\n  return require(\"./__generated__/AddAuthorMutation.graphql\");\n};\n\nexport default (function (name, age, birthPlace) {\n  var variables = {\n    input: {\n      author: {\n        name: name,\n        age: age,\n        birthPlace: birthPlace\n      }\n    },\n    clientMutationId: \"\"\n  };\n  var optimisticResponse = {\n    addAuthor: {\n      author: {\n        id: null,\n        name: name,\n        age: age,\n        birthPlace: birthPlace,\n        books: []\n      }\n    }\n  };\n\n  var updater = function updater(proxyStore) {\n    var addAuthorField = proxyStore.getRootField('addAuthor');\n    console.log(addAuthorField);\n    var newAuthor = addAuthorField.getLinkedRecord('author');\n    if (!newAuthor) return;\n    var viewerId = 'author-viewer-fixed';\n    var viewerProxy = proxyStore.get(viewerId);\n    var connection = ConnectionHandler.getConnection(viewerProxy, \"AuthorList_allAuthors\");\n\n    if (connection) {\n      console.log(\"inserting\");\n      var newEdge = ConnectionHandler.createEdge(proxyStore, connection, newAuthor, 'AuthorEdge');\n      ConnectionHandler.insertEdgeAfter(connection, newEdge);\n    }\n  };\n\n  commitMutation(environment, {\n    mutation: mutation,\n    variables: variables,\n    onCompleted: function onCompleted(response, errors) {\n      console.log(response);\n    },\n    onError: function onError(err) {\n      return console.error(err);\n    },\n    optimisticUpdater: updater,\n    updater: updater,\n    optimisticResponse: optimisticResponse\n  });\n});","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/mutations/AddAuthorMutation.js"],"names":["commitMutation","graphql","ConnectionHandler","environment","mutation","name","age","birthPlace","variables","input","author","clientMutationId","optimisticResponse","addAuthor","id","books","updater","proxyStore","addAuthorField","getRootField","console","log","newAuthor","getLinkedRecord","viewerId","viewerProxy","get","connection","getConnection","newEdge","createEdge","insertEdgeAfter","onCompleted","response","errors","onError","err","error","optimisticUpdater"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,OAAxB,QAAsC,aAAtC;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AACA,IAAMC,QAAQ,YAARA,QAAQ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,CAAd;;AAmBA,gBAAe,UAACC,IAAD,EAAMC,GAAN,EAAUC,UAAV,EAAwB;AACrC,MAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAC;AAACC,MAAAA,MAAM,EAAE;AACbL,QAAAA,IAAI,EAAJA,IADa;AAEbC,QAAAA,GAAG,EAAHA,GAFa;AAGbC,QAAAA,UAAU,EAAVA;AAHa;AAAT,KADU;AAMhBI,IAAAA,gBAAgB,EAAC;AAND,GAAlB;AASA,MAAMC,kBAAkB,GAAG;AACvBC,IAAAA,SAAS,EAAE;AACTH,MAAAA,MAAM,EAAE;AACNI,QAAAA,EAAE,EAAE,IADE;AAENT,QAAAA,IAAI,EAAEA,IAFA;AAGNC,QAAAA,GAAG,EAACA,GAHE;AAINC,QAAAA,UAAU,EAACA,UAJL;AAKNQ,QAAAA,KAAK,EAAC;AALA;AADC;AADY,GAA3B;;AAYA,MAAMC,OAAO,GAAI,SAAXA,OAAW,CAACC,UAAD,EAAgB;AAE/B,QAAMC,cAAc,GAAED,UAAU,CAACE,YAAX,CAAwB,WAAxB,CAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACA,QAAMI,SAAS,GAAEJ,cAAc,CAACK,eAAf,CAA+B,QAA/B,CAAjB;AACA,QAAG,CAACD,SAAJ,EAAe;AACf,QAAME,QAAQ,GAAC,qBAAf;AACA,QAAMC,WAAW,GAAGR,UAAU,CAACS,GAAX,CAAeF,QAAf,CAApB;AACC,QAAMG,UAAU,GAACzB,iBAAiB,CAAC0B,aAAlB,CAAgCH,WAAhC,EAA4C,uBAA5C,CAAjB;;AACA,QAAGE,UAAH,EAAc;AACZP,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMQ,OAAO,GAAC3B,iBAAiB,CAAC4B,UAAlB,CAA6Bb,UAA7B,EAAwCU,UAAxC,EAAmDL,SAAnD,EAA6D,YAA7D,CAAd;AACApB,MAAAA,iBAAiB,CAAC6B,eAAlB,CAAkCJ,UAAlC,EAA6CE,OAA7C;AACD;AACH,GAdD;;AAgBA7B,EAAAA,cAAc,CACZG,WADY,EAEZ;AACEC,IAAAA,QAAQ,EAARA,QADF;AAEEI,IAAAA,SAAS,EAATA,SAFF;AAIEwB,IAAAA,WAAW,EAAE,qBAACC,QAAD,EAAWC,MAAX,EAAsB;AACjCd,MAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACD,KANH;AAOEE,IAAAA,OAAO,EAAE,iBAAAC,GAAG;AAAA,aAAIhB,OAAO,CAACiB,KAAR,CAAcD,GAAd,CAAJ;AAAA,KAPd;AAQEE,IAAAA,iBAAiB,EAACtB,OARpB;AASEA,IAAAA,OAAO,EAACA,OATV;AAUEJ,IAAAA,kBAAkB,EAAlBA;AAVF,GAFY,CAAd;AAeD,CArDD","sourcesContent":["import {commitMutation, graphql} from 'react-relay';\nimport { ConnectionHandler } from \"relay-runtime\";\nimport environment from '../Environment';\nconst mutation = graphql`\n  mutation AddAuthorMutation(\n    $input: AddAuthorInput!\n  ) {\n    addAuthor(input:$input) {\n      author{\n      id\n      name\n      birthPlace\n      age\n      books\n      {\n        title\n      }\n      }\n    }\n    }\n`;\n\nexport default (name,age,birthPlace)=> {\n  const variables = {\n    input:{author: {\n      name,\n      age,\n      birthPlace,\n    }},\n    clientMutationId:\"\"\n  };\n\n  const optimisticResponse = {\n      addAuthor: {\n        author: {\n          id: null,\n          name: name,\n          age:age,\n          birthPlace:birthPlace,\n          books:[]\n        },\n    }\n  };\n\n  const updater =  (proxyStore) => {\n\n    const addAuthorField= proxyStore.getRootField('addAuthor');\n    console.log(addAuthorField);\n    const newAuthor= addAuthorField.getLinkedRecord('author');\n    if(!newAuthor) return;\n    const viewerId='author-viewer-fixed';\n    const viewerProxy = proxyStore.get(viewerId);\n     const connection=ConnectionHandler.getConnection(viewerProxy,\"AuthorList_allAuthors\");\n     if(connection){\n       console.log(\"inserting\");\n       const newEdge=ConnectionHandler.createEdge(proxyStore,connection,newAuthor,'AuthorEdge');\n       ConnectionHandler.insertEdgeAfter(connection,newEdge);\n     }\n  };\n\n  commitMutation(\n    environment,\n    {\n      mutation,\n      variables,\n\n      onCompleted: (response, errors) => {\n        console.log(response);\n      },\n      onError: err => console.error(err),\n      optimisticUpdater:updater,\n      updater:updater,\n      optimisticResponse,\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}