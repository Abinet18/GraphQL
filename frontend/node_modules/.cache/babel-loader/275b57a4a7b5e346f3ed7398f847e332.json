{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/**\n * @internal\n *\n * A helper for manipulating a `RecordSource` via an imperative/OO-style API.\n */\n\n\nvar RelayRecordSourceProxy = function () {\n  function RelayRecordSourceProxy(mutator, handlerProvider) {\n    (0, _classCallCheck3['default'])(this, RelayRecordSourceProxy);\n    this.__mutator = mutator;\n    this._handlerProvider = handlerProvider || null;\n    this._proxies = {};\n  }\n\n  RelayRecordSourceProxy.prototype.publishSource = function publishSource(source, fieldPayloads) {\n    var _this = this;\n\n    var dataIDs = source.getRecordIDs();\n    dataIDs.forEach(function (dataID) {\n      var status = source.getStatus(dataID);\n\n      if (status === require('./RelayRecordState').EXISTENT) {\n        var sourceRecord = source.get(dataID);\n\n        if (sourceRecord) {\n          if (_this.__mutator.getStatus(dataID) !== require('./RelayRecordState').EXISTENT) {\n            _this.create(dataID, require('./RelayModernRecord').getType(sourceRecord));\n          }\n\n          _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);\n\n          delete _this._proxies[dataID];\n        }\n      } else if (status === require('./RelayRecordState').NONEXISTENT) {\n        _this['delete'](dataID);\n      }\n    });\n\n    if (fieldPayloads && fieldPayloads.length) {\n      fieldPayloads.forEach(function (fieldPayload) {\n        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);\n\n        !handler ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernEnvironment: Expected a handler to be provided for handle `%s`.', fieldPayload.handle) : require('fbjs/lib/invariant')(false) : void 0;\n        handler.update(_this, fieldPayload);\n      });\n    }\n  };\n\n  RelayRecordSourceProxy.prototype.commitPayload = function commitPayload(operation, response) {\n    if (!response) {\n      return new (require('./RelayRecordSourceSelectorProxy'))(this, operation.fragment);\n    }\n\n    var _normalizeRelayPayloa = require('./normalizeRelayPayload')(operation.root, response),\n        source = _normalizeRelayPayloa.source,\n        fieldPayloads = _normalizeRelayPayloa.fieldPayloads;\n\n    this.publishSource(source, fieldPayloads);\n    return new (require('./RelayRecordSourceSelectorProxy'))(this, operation.fragment);\n  };\n\n  RelayRecordSourceProxy.prototype.create = function create(dataID, typeName) {\n    this.__mutator.create(dataID, typeName);\n\n    delete this._proxies[dataID];\n    var record = this.get(dataID); // For flow\n\n    !record ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordSourceProxy#create(): Expected the created record to exist.') : require('fbjs/lib/invariant')(false) : void 0;\n    return record;\n  };\n\n  RelayRecordSourceProxy.prototype['delete'] = function _delete(dataID) {\n    !(dataID !== require('./RelayStoreUtils').ROOT_ID) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordSourceProxy#delete(): Cannot delete the root record.') : require('fbjs/lib/invariant')(false) : void 0;\n    delete this._proxies[dataID];\n\n    this.__mutator['delete'](dataID);\n  };\n\n  RelayRecordSourceProxy.prototype.get = function get(dataID) {\n    if (!this._proxies.hasOwnProperty(dataID)) {\n      var status = this.__mutator.getStatus(dataID);\n\n      if (status === require('./RelayRecordState').EXISTENT) {\n        this._proxies[dataID] = new (require('./RelayRecordProxy'))(this, this.__mutator, dataID);\n      } else {\n        this._proxies[dataID] = status === require('./RelayRecordState').NONEXISTENT ? null : undefined;\n      }\n    }\n\n    return this._proxies[dataID];\n  };\n\n  RelayRecordSourceProxy.prototype.getRoot = function getRoot() {\n    var root = this.get(require('./RelayStoreUtils').ROOT_ID);\n\n    if (!root) {\n      root = this.create(require('./RelayStoreUtils').ROOT_ID, require('./RelayStoreUtils').ROOT_TYPE);\n    }\n\n    !(root && root.getType() === require('./RelayStoreUtils').ROOT_TYPE) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordSourceProxy#getRoot(): Expected the source to contain a ' + 'root record.') : require('fbjs/lib/invariant')(false) : void 0;\n    return root;\n  };\n\n  return RelayRecordSourceProxy;\n}();\n\nmodule.exports = RelayRecordSourceProxy;","map":null,"metadata":{},"sourceType":"script"}