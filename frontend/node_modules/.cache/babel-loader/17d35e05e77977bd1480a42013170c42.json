{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n/**\n * @public\n *\n * Given the result `item` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment for that item.\n *\n * Example:\n *\n * Given two fragments as follows:\n *\n * ```\n * fragment Parent on User {\n *   id\n *   ...Child\n * }\n * fragment Child on User {\n *   name\n * }\n * ```\n *\n * And given some object `parent` that is the results of `Parent` for id \"4\",\n * the results of `Child` can be accessed by first getting a selector and then\n * using that selector to `lookup()` the results against the environment:\n *\n * ```\n * const childSelector = getSelector(queryVariables, Child, parent);\n * const childData = environment.lookup(childSelector).data;\n * ```\n */\n\nfunction getSelector(operationVariables, fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : require('fbjs/lib/invariant')(false) : void 0;\n\n  var dataID = item[require('./RelayStoreUtils').ID_KEY];\n\n  var fragments = item[require('./RelayStoreUtils').FRAGMENTS_KEY];\n\n  if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null) {\n    var argumentVariables = fragments[fragment.name];\n\n    var fragmentVariables = require('./RelayConcreteVariables').getFragmentVariables(fragment, operationVariables, argumentVariables);\n\n    return {\n      dataID: dataID,\n      node: fragment,\n      variables: fragmentVariables\n    };\n  }\n\n  process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, JSON.stringify(item), fragment.name) : void 0;\n  return null;\n}\n/**\n * @public\n *\n * Given the result `items` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment on those\n * items. This is similar to `getSelector` but for \"plural\" fragments that\n * expect an array of results and therefore return an array of selectors.\n */\n\n\nfunction getSelectorList(operationVariables, fragment, items) {\n  var selectors = null;\n  items.forEach(function (item) {\n    var selector = item != null ? getSelector(operationVariables, fragment, item) : null;\n\n    if (selector != null) {\n      selectors = selectors || [];\n      selectors.push(selector);\n    }\n  });\n  return selectors;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the selectors for those fragments from the results.\n *\n * The canonical use-case for this function is ReactRelayFragmentContainer, which\n * uses this function to convert (props, fragments) into selectors so that it\n * can read the results to pass to the inner component.\n */\n\n\nfunction getSelectorsFromObject(operationVariables, fragments, object) {\n  var selectors = {};\n\n  for (var _key in fragments) {\n    if (fragments.hasOwnProperty(_key)) {\n      var fragment = fragments[_key];\n      var item = object[_key];\n\n      if (item == null) {\n        selectors[_key] = item;\n      } else if (fragment.metadata && fragment.metadata.plural === true) {\n        !Array.isArray(item) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernSelector: Expected value for key `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', _key, JSON.stringify(item), fragment.name) : require('fbjs/lib/invariant')(false) : void 0;\n        selectors[_key] = getSelectorList(operationVariables, fragment, item);\n      } else {\n        !!Array.isArray(item) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernFragmentSpecResolver: Expected value for key `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', _key, JSON.stringify(item), fragment.name) : require('fbjs/lib/invariant')(false) : void 0;\n        selectors[_key] = getSelector(operationVariables, fragment, item);\n      }\n    }\n  }\n\n  return selectors;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts a mapping of keys -> id(s) of the results.\n *\n * Similar to `getSelectorsFromObject()`, this function can be useful in\n * determining the \"identity\" of the props passed to a component.\n */\n\n\nfunction getDataIDsFromObject(fragments, object) {\n  var ids = {};\n\n  for (var _key2 in fragments) {\n    if (fragments.hasOwnProperty(_key2)) {\n      var fragment = fragments[_key2];\n      var item = object[_key2];\n\n      if (item == null) {\n        ids[_key2] = item;\n      } else if (fragment.metadata && fragment.metadata.plural === true) {\n        !Array.isArray(item) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernSelector: Expected value for key `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', _key2, JSON.stringify(item), fragment.name) : require('fbjs/lib/invariant')(false) : void 0;\n        ids[_key2] = getDataIDs(fragment, item);\n      } else {\n        !!Array.isArray(item) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernFragmentSpecResolver: Expected value for key `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', _key2, JSON.stringify(item), fragment.name) : require('fbjs/lib/invariant')(false) : void 0;\n        ids[_key2] = getDataID(fragment, item);\n      }\n    }\n  }\n\n  return ids;\n}\n/**\n * @internal\n */\n\n\nfunction getDataIDs(fragment, items) {\n  var ids = void 0;\n  items.forEach(function (item) {\n    var id = item != null ? getDataID(fragment, item) : null;\n\n    if (id != null) {\n      ids = ids || [];\n      ids.push(id);\n    }\n  });\n  return ids || null;\n}\n/**\n * @internal\n */\n\n\nfunction getDataID(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : require('fbjs/lib/invariant')(false) : void 0;\n\n  var dataID = item[require('./RelayStoreUtils').ID_KEY];\n\n  if (typeof dataID === 'string') {\n    return dataID;\n  }\n\n  process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, JSON.stringify(item), fragment.name) : void 0;\n  return null;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the merged variables that would be in scope for those\n * fragments/results.\n *\n * This can be useful in determing what varaibles were used to fetch the data\n * for a Relay container, for example.\n */\n\n\nfunction getVariablesFromObject(operationVariables, fragments, object) {\n  var variables = {};\n\n  for (var _key3 in fragments) {\n    if (fragments.hasOwnProperty(_key3)) {\n      var _ret = function () {\n        var fragment = fragments[_key3];\n        var item = object[_key3];\n\n        if (item == null) {\n          return 'continue';\n        } else if (fragment.metadata && fragment.metadata.plural === true) {\n          !Array.isArray(item) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernSelector: Expected value for key `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', _key3, JSON.stringify(item), fragment.name) : require('fbjs/lib/invariant')(false) : void 0;\n          item.forEach(function (value) {\n            if (value != null) {\n              var itemVariables = getVariables(operationVariables, fragment, value);\n\n              if (itemVariables) {\n                Object.assign(variables, itemVariables);\n              }\n            }\n          });\n        } else {\n          !!Array.isArray(item) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernFragmentSpecResolver: Expected value for key `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', _key3, JSON.stringify(item), fragment.name) : require('fbjs/lib/invariant')(false) : void 0;\n          var itemVariables = getVariables(operationVariables, fragment, item);\n\n          if (itemVariables) {\n            Object.assign(variables, itemVariables);\n          }\n        }\n      }();\n\n      if (_ret === 'continue') continue;\n    }\n  }\n\n  return variables;\n}\n/**\n * @internal\n */\n\n\nfunction getVariables(operationVariables, fragment, item) {\n  var selector = getSelector(operationVariables, fragment, item);\n  return selector ? selector.variables : null;\n}\n/**\n * @public\n *\n * Determine if two selectors are equal (represent the same selection). Note\n * that this function returns `false` when the two queries/fragments are\n * different objects, even if they select the same fields.\n */\n\n\nfunction areEqualSelectors(thisSelector, thatSelector) {\n  return thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && require('fbjs/lib/areEqual')(thisSelector.variables, thatSelector.variables);\n}\n\nmodule.exports = {\n  areEqualSelectors: areEqualSelectors,\n  getDataIDsFromObject: getDataIDsFromObject,\n  getSelector: getSelector,\n  getSelectorList: getSelectorList,\n  getSelectorsFromObject: getSelectorsFromObject,\n  getVariablesFromObject: getVariablesFromObject\n};","map":null,"metadata":{},"sourceType":"script"}