{"ast":null,"code":"import _objectSpread from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from './actions';\nimport Immutable from 'immutable';\nvar initialState = {\n  books: Immutable.OrderedMap(),\n  authors: Immutable.OrderedMap()\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.ADD_BOOK:\n      {\n        var books = state.books.set(action.book.id, action.book);\n        console.log(\"from reducer\", books);\n        return _objectSpread({}, state, {\n          books: books\n        });\n      }\n\n    case actionTypes.UPDATE_BOOK:\n      {\n        var _books = state.books.set(action.book.id, action.book);\n\n        console.log(\"from reducer\", _books);\n        return _objectSpread({}, state, {\n          books: _books\n        });\n      }\n\n    case actionTypes.FETCH_BOOKS:\n      {\n        return _objectSpread({}, state, {\n          books: action.books\n        });\n      }\n\n    case actionTypes.ADD_AUTHOR:\n      {\n        var authors = state.authors.set(action.authorid, action.author);\n        return _objectSpread({}, state, {\n          authors: authors\n        });\n      }\n\n    case actionTypes.FETCH_AUTHORS:\n      {\n        return _objectSpread({}, state, {\n          authors: action.authors\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/store/reducer.js"],"names":["actionTypes","Immutable","initialState","books","OrderedMap","authors","reducer","state","action","type","ADD_BOOK","set","book","id","console","log","UPDATE_BOOK","FETCH_BOOKS","ADD_AUTHOR","authorid","author","FETCH_AUTHORS"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,WAA7B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEF,SAAS,CAACG,UAAV,EADU;AAEjBC,EAAAA,OAAO,EAACJ,SAAS,CAACG,UAAV;AAFS,CAArB;;AAKA,IAAME,OAAO,GAAG,SAAVA,OAAU,GAChB;AAAA,MADiBC,KACjB,uEADuBL,YACvB;AAAA,MADoCM,MACpC;;AACI,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKT,WAAW,CAACU,QAAjB;AAA0B;AAC1B,YAAIP,KAAK,GAACI,KAAK,CAACJ,KAAN,CAAYQ,GAAZ,CAAgBH,MAAM,CAACI,IAAP,CAAYC,EAA5B,EAA+BL,MAAM,CAACI,IAAtC,CAAV;AAEAE,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BZ,KAA3B;AACE,iCACKI,KADL;AAEEJ,UAAAA,KAAK,EAACA;AAFR;AAID;;AACD,SAAKH,WAAW,CAACgB,WAAjB;AAA6B;AAC7B,YAAIb,MAAK,GAACI,KAAK,CAACJ,KAAN,CAAYQ,GAAZ,CAAgBH,MAAM,CAACI,IAAP,CAAYC,EAA5B,EAA+BL,MAAM,CAACI,IAAtC,CAAV;;AAEAE,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BZ,MAA3B;AACE,iCACKI,KADL;AAEEJ,UAAAA,KAAK,EAACA;AAFR;AAID;;AACD,SAAKH,WAAW,CAACiB,WAAjB;AAA6B;AAC3B,iCACKV,KADL;AAEEJ,UAAAA,KAAK,EAACK,MAAM,CAACL;AAFf;AAID;;AACD,SAAKH,WAAW,CAACkB,UAAjB;AAA4B;AAC1B,YAAIb,OAAO,GAACE,KAAK,CAACF,OAAN,CAAcM,GAAd,CAAkBH,MAAM,CAACW,QAAzB,EAAkCX,MAAM,CAACY,MAAzC,CAAZ;AACA,iCACKb,KADL;AAEEF,UAAAA,OAAO,EAACA;AAFV;AAID;;AACD,SAAKL,WAAW,CAACqB,aAAjB;AAA+B;AAC7B,iCACKd,KADL;AAEEF,UAAAA,OAAO,EAACG,MAAM,CAACH;AAFjB;AAID;;AACD;AAAU,aAAOE,KAAP;AAtCZ;AAwCH,CA1CD;;AA4CA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from './actions';\nimport Immutable from 'immutable';\n\nconst initialState = {\n    books: Immutable.OrderedMap(),\n    authors:Immutable.OrderedMap()\n};\n\nconst reducer = (state=initialState,action)=>\n{\n    switch(action.type){\n      case actionTypes.ADD_BOOK:{\n      let books=state.books.set(action.book.id,action.book);\n\n      console.log(\"from reducer\",books);\n        return {\n          ...state,\n          books:books\n          }\n      }\n      case actionTypes.UPDATE_BOOK:{\n      let books=state.books.set(action.book.id,action.book);\n\n      console.log(\"from reducer\",books);\n        return {\n          ...state,\n          books:books\n          }\n      }\n      case actionTypes.FETCH_BOOKS:{\n        return {\n          ...state,\n          books:action.books,\n        }\n      }\n      case actionTypes.ADD_AUTHOR:{\n        let authors=state.authors.set(action.authorid,action.author);\n        return {\n          ...state,\n          authors:authors\n        }\n      }\n      case actionTypes.FETCH_AUTHORS:{\n        return {\n          ...state,\n          authors:action.authors\n        }\n      }\n      default : return state;\n    }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}