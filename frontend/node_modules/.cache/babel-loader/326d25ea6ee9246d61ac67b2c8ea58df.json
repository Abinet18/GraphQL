{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nfunction createRelayNetworkLogger(LoggerTransaction) {\n  return {\n    wrapFetch: function wrapFetch(fetch, graphiQLPrinter) {\n      return function (request, variables, cacheConfig, uploadables) {\n        var wrapped = wrapExecute(require('./ConvertToExecuteFunction').convertFetch(fetch), LoggerTransaction, graphiQLPrinter);\n        return wrapped(request, variables, cacheConfig, uploadables);\n      };\n    },\n    wrapSubscribe: function wrapSubscribe(subscribe, graphiQLPrinter) {\n      return function (request, variables, cacheConfig) {\n        var wrapped = wrapExecute(require('./ConvertToExecuteFunction').convertSubscribe(subscribe), LoggerTransaction, graphiQLPrinter);\n        return wrapped(request, variables, cacheConfig);\n      };\n    }\n  };\n}\n\nfunction wrapExecute(execute, LoggerTransaction, graphiQLPrinter) {\n  return function (request, variables, cacheConfig, uploadables) {\n    var transaction = void 0;\n\n    function addLogs(error, response, status) {\n      // Only print GraphiQL links for non-batch requests.\n      if (graphiQLPrinter && request.kind === require('./RelayConcreteNode').REQUEST) {\n        transaction.addLog('GraphiQL', graphiQLPrinter(request, variables));\n      }\n\n      transaction.addLog('Cache Config', cacheConfig);\n      transaction.addLog('Variables', JSON.stringify(variables, null, 2));\n\n      if (status) {\n        transaction.addLog('Status', status);\n      }\n\n      if (error) {\n        transaction.addLog('Error', error);\n      }\n\n      if (response) {\n        transaction.addLog('Response', response);\n      }\n    }\n\n    function flushLogs(error, response, status) {\n      addLogs(error, response, status);\n      transaction.flushLogs(error, response, status);\n    }\n\n    function commitLogs(error, response, status) {\n      addLogs(error, response, status);\n      transaction.commitLogs(error, response, status);\n    }\n\n    var observable = execute(request, variables, cacheConfig, uploadables);\n    var isSubscription = request.operationKind === 'subscription';\n    return observable['do']({\n      start: function start() {\n        transaction = new LoggerTransaction({\n          request: request,\n          variables: variables,\n          cacheConfig: cacheConfig,\n          uploadables: uploadables\n        });\n        console.time && console.time(transaction.getIdentifier());\n\n        if (isSubscription) {\n          flushLogs(null, null, 'subscription is sent.');\n        }\n      },\n      next: function next(payload) {\n        flushLogs(null, payload);\n        console.time && console.time(transaction.getIdentifier());\n      },\n      error: function error(_error) {\n        return commitLogs(_error, null, null);\n      },\n      complete: function complete() {\n        if (isSubscription) {\n          commitLogs(null, null, 'subscription was closed.');\n        } else {\n          // the last `next` already flushed the logs, just mark as committed\n          // without spamming the logs\n          transaction.markCommitted();\n        }\n      },\n      unsubscribe: function unsubscribe() {\n        return commitLogs(null, null, isSubscription ? 'subscription is unsubscribed.' : 'execution is unsubscribed.');\n      }\n    });\n  };\n}\n\nmodule.exports = createRelayNetworkLogger;","map":null,"metadata":{},"sourceType":"script"}