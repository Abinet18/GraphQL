{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n/**\n * Higher-level helper function to execute a mutation against a specific\n * environment.\n */\n\nfunction commitRelayModernMutation(environment, config) {\n  !require('./isRelayModernEnvironment')(environment) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'commitRelayModernMutation: expect `environment` to be an instance of ' + '`RelayModernEnvironment`.') : require('fbjs/lib/invariant')(false) : void 0;\n  var _environment$unstable = environment.unstable_internal,\n      createOperationSelector = _environment$unstable.createOperationSelector,\n      getRequest = _environment$unstable.getRequest;\n  var mutation = getRequest(config.mutation);\n\n  if (mutation.operationKind !== 'mutation') {\n    throw new Error('commitRelayModernMutation: Expected mutation operation');\n  }\n\n  var optimisticResponse = config.optimisticResponse,\n      optimisticUpdater = config.optimisticUpdater,\n      updater = config.updater;\n  var configs = config.configs,\n      onError = config.onError,\n      variables = config.variables,\n      uploadables = config.uploadables;\n  var operation = createOperationSelector(mutation, variables); // TODO: remove this check after we fix flow.\n\n  if (typeof optimisticResponse === 'function') {\n    optimisticResponse = optimisticResponse();\n    process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(false, 'commitRelayModernMutation: Expected `optimisticResponse` to be an object, ' + 'received a function.') : void 0;\n  }\n\n  if (optimisticResponse && mutation.fragment.selections && mutation.fragment.selections.length === 1 && mutation.fragment.selections[0].kind === 'LinkedField') {\n    var mutationRoot = mutation.fragment.selections[0].name;\n    process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(optimisticResponse[mutationRoot], 'commitRelayModernMutation: Expected `optimisticResponse` to be wrapped ' + 'in mutation name `%s`', mutationRoot) : void 0;\n  }\n\n  if (configs) {\n    var _RelayDeclarativeMuta = require('./RelayDeclarativeMutationConfig').convert(configs, mutation, optimisticUpdater, updater);\n\n    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;\n    updater = _RelayDeclarativeMuta.updater;\n  }\n\n  return environment.executeMutation({\n    operation: operation,\n    optimisticResponse: optimisticResponse,\n    optimisticUpdater: optimisticUpdater,\n    updater: updater,\n    uploadables: uploadables\n  }).subscribeLegacy({\n    onNext: function onNext(payload) {\n      // NOTE: commitRelayModernMutation has a non-standard use of\n      // onCompleted() by calling it on every next value. It may be called\n      // multiple times if a network request produces multiple responses.\n      var onCompleted = config.onCompleted;\n\n      if (onCompleted) {\n        var snapshot = environment.lookup(operation.fragment);\n        onCompleted(snapshot.data, payload.response.errors);\n      }\n    },\n    onError: onError\n  });\n}\n\nmodule.exports = commitRelayModernMutation;","map":null,"metadata":{},"sourceType":"script"}