{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _extends3 = _interopRequireDefault(require('babel-runtime/helpers/extends'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar containerContextTypes = {\n  relay: require('./RelayPropTypes').Relay\n};\n/**\n * Creates a component class whose instances adapt to the\n * `context.relay.environment` in which they are rendered and which have the\n * necessary static methods (`getFragment()` etc) to be composed within classic\n * `Relay.Containers`.\n */\n\nfunction buildReactRelayContainer(ComponentClass, fragmentSpec, createContainerWithFragments, providesChildContext) {\n  // Sanity-check user-defined fragment input\n  var containerName = require('./ReactRelayContainerUtils').getContainerName(ComponentClass);\n\n  require('./assertFragmentMap')(require('./ReactRelayContainerUtils').getComponentName(ComponentClass), fragmentSpec); // Memoize a container for the last environment instance encountered\n\n\n  var environment = void 0;\n  var Container = void 0;\n\n  function ContainerConstructor(props, context) {\n    if (Container == null || context.relay.environment !== environment) {\n      environment = context.relay.environment;\n\n      if (process.env.NODE_ENV !== 'production') {\n        var _require2 = require('relay-runtime'),\n            isRelayModernEnvironment = _require2.isRelayModernEnvironment;\n\n        if (!isRelayModernEnvironment(environment)) {\n          throw new Error('RelayModernContainer: Can only use Relay Modern component ' + (containerName + ' in a Relay Modern environment!\\n') + 'When using Relay Modern and Relay Classic in the same ' + 'application, ensure components use Relay Compat to work in ' + 'both environments.\\n' + 'See: http://facebook.github.io/relay/docs/relay-compat.html');\n        }\n      }\n\n      var getFragmentFromTag = environment.unstable_internal.getFragment;\n\n      var _fragments = require('fbjs/lib/mapObject')(fragmentSpec, getFragmentFromTag);\n\n      Container = createContainerWithFragments(ComponentClass, _fragments); // Attach static lifecycle to wrapper component so React can see it.\n\n      ContainerConstructor.getDerivedStateFromProps = Container.getDerivedStateFromProps;\n    } // $FlowFixMe\n\n\n    return new Container(props, context);\n  }\n\n  ContainerConstructor.contextTypes = containerContextTypes;\n\n  if (providesChildContext) {\n    ContainerConstructor.childContextTypes = containerContextTypes;\n  }\n\n  function forwardRef(props, ref) {\n    return require('react').createElement(ContainerConstructor, (0, _extends3['default'])({}, props, {\n      componentRef: props.componentRef || ref\n    }));\n  }\n\n  forwardRef.displayName = containerName; // $FlowFixMe\n\n  var ForwardContainer = require('react').forwardRef(forwardRef);\n\n  if (process.env.NODE_ENV !== 'production') {\n    ForwardContainer.__ComponentClass = ComponentClass; // Classic container static methods.\n\n    ForwardContainer.getFragment = function getFragmentOnModernContainer() {\n      throw new Error('RelayModernContainer: ' + containerName + '.getFragment() was called on ' + 'a Relay Modern component by a Relay Classic or Relay Compat ' + 'component.\\n' + 'When using Relay Modern and Relay Classic in the same ' + 'application, ensure components use Relay Compat to work in ' + 'both environments.\\n' + 'See: http://facebook.github.io/relay/docs/relay-compat.html');\n    };\n  }\n\n  return ForwardContainer;\n}\n\nmodule.exports = buildReactRelayContainer;","map":null,"metadata":{},"sourceType":"script"}