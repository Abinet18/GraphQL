{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict-local\n * @format\n */\n'use strict';\n\nvar _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/**\n * @internal\n *\n * A helper class for manipulating a given record from a record source via an\n * imperative/OO-style API.\n */\n\n\nvar RelayRecordProxy = function () {\n  function RelayRecordProxy(source, mutator, dataID) {\n    (0, _classCallCheck3['default'])(this, RelayRecordProxy);\n    this._dataID = dataID;\n    this._mutator = mutator;\n    this._source = source;\n  }\n\n  RelayRecordProxy.prototype.copyFieldsFrom = function copyFieldsFrom(source) {\n    this._mutator.copyFields(source.getDataID(), this._dataID);\n  };\n\n  RelayRecordProxy.prototype.getDataID = function getDataID() {\n    return this._dataID;\n  };\n\n  RelayRecordProxy.prototype.getType = function getType() {\n    var type = this._mutator.getType(this._dataID);\n\n    !(type != null) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordProxy: Cannot get the type of deleted record `%s`.', this._dataID) : require('fbjs/lib/invariant')(false) : void 0;\n    return type;\n  };\n\n  RelayRecordProxy.prototype.getValue = function getValue(name, args) {\n    var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n    return this._mutator.getValue(this._dataID, storageKey);\n  };\n\n  RelayRecordProxy.prototype.setValue = function setValue(value, name, args) {\n    !isValidLeafValue(value) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordProxy#setValue(): Expected a scalar or array of scalars, ' + 'got `%s`.', JSON.stringify(value)) : require('fbjs/lib/invariant')(false) : void 0;\n\n    var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n    this._mutator.setValue(this._dataID, storageKey, value);\n\n    return this;\n  };\n\n  RelayRecordProxy.prototype.getLinkedRecord = function getLinkedRecord(name, args) {\n    var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n    var linkedID = this._mutator.getLinkedRecordID(this._dataID, storageKey);\n\n    return linkedID != null ? this._source.get(linkedID) : linkedID;\n  };\n\n  RelayRecordProxy.prototype.setLinkedRecord = function setLinkedRecord(record, name, args) {\n    !(record instanceof RelayRecordProxy) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordProxy#setLinkedRecord(): Expected a record, got `%s`.', record) : require('fbjs/lib/invariant')(false) : void 0;\n\n    var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n    var linkedID = record.getDataID();\n\n    this._mutator.setLinkedRecordID(this._dataID, storageKey, linkedID);\n\n    return this;\n  };\n\n  RelayRecordProxy.prototype.getOrCreateLinkedRecord = function getOrCreateLinkedRecord(name, typeName, args) {\n    var linkedRecord = this.getLinkedRecord(name, args);\n\n    if (!linkedRecord) {\n      var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n      var clientID = require('./generateRelayClientID')(this.getDataID(), storageKey);\n\n      linkedRecord = this._source.create(clientID, typeName);\n      this.setLinkedRecord(linkedRecord, name, args);\n    }\n\n    return linkedRecord;\n  };\n\n  RelayRecordProxy.prototype.getLinkedRecords = function getLinkedRecords(name, args) {\n    var _this = this;\n\n    var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n    var linkedIDs = this._mutator.getLinkedRecordIDs(this._dataID, storageKey);\n\n    if (linkedIDs == null) {\n      return linkedIDs;\n    }\n\n    return linkedIDs.map(function (linkedID) {\n      return linkedID != null ? _this._source.get(linkedID) : linkedID;\n    });\n  };\n\n  RelayRecordProxy.prototype.setLinkedRecords = function setLinkedRecords(records, name, args) {\n    !Array.isArray(records) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayRecordProxy#setLinkedRecords(): Expected records to be an array, got `%s`.', records) : require('fbjs/lib/invariant')(false) : void 0;\n\n    var storageKey = require('./RelayStoreUtils').getStableStorageKey(name, args);\n\n    var linkedIDs = records.map(function (record) {\n      return record && record.getDataID();\n    });\n\n    this._mutator.setLinkedRecordIDs(this._dataID, storageKey, linkedIDs);\n\n    return this;\n  };\n\n  return RelayRecordProxy;\n}();\n\nfunction isValidLeafValue(value) {\n  return value == null || typeof value !== 'object' || Array.isArray(value) && value.every(isValidLeafValue);\n}\n\nmodule.exports = RelayRecordProxy;","map":null,"metadata":{},"sourceType":"script"}