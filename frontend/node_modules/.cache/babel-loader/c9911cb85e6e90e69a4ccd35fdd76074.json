{"ast":null,"code":"import _classCallCheck from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/components/BookContainer.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { graphql, fetchQuery } from 'react-relay';\nimport environment from '../Environment';\nimport BookList from './BookList';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../store/actions';\n\nvar allBooksQuery = function allBooksQuery() {\n  var node = require(\"./__generated__/BookContainerQuery.graphql\");\n\n  if (node.hash && node.hash !== \"728336729716ae3b9846a83843e46e5e\") {\n    console.error(\"The definition of 'BookContainerQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n  }\n\n  return require(\"./__generated__/BookContainerQuery.graphql\");\n};\n\nvar BookContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BookContainer, _Component);\n\n  function BookContainer() {\n    _classCallCheck(this, BookContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BookContainer).apply(this, arguments));\n  }\n\n  _createClass(BookContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      console.log(\"trying to fetch books\");\n      fetchQuery(environment, allBooksQuery).then(function (data) {\n        console.log(data);\n        var books = new Map();\n        data.viewer.allBooks.edges.map(function (_ref) {\n          var node = _ref.node;\n          books.set(node.id, node);\n        });\n\n        _this.props.onFetchBooks(books);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"books container \", this.props.books);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Books\"), this.props.books.size > 0 ? React.createElement(BookList, {\n        books: this.props.books,\n        onAddBook: this.props.onAddBook,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }) : '');\n    }\n  }]);\n\n  return BookContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    books: state.books,\n    authors: state.authors\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAddBook: function onAddBook(book) {\n      return dispatch({\n        type: actionTypes.ADD_BOOK,\n        book: book\n      });\n    },\n    onFetchBooks: function onFetchBooks(books) {\n      return dispatch({\n        type: actionTypes.FETCH_BOOKS,\n        books: books\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookContainer);","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/components/BookContainer.js"],"names":["React","Component","graphql","fetchQuery","environment","BookList","connect","actionTypes","allBooksQuery","BookContainer","console","log","then","data","books","Map","viewer","allBooks","edges","map","node","set","id","props","onFetchBooks","size","onAddBook","mapStateToProps","state","authors","mapDispatchToProps","dispatch","book","type","ADD_BOOK","FETCH_BOOKS"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,YAAP;AACA,SAAQC,OAAR,EAAgBC,UAAhB,QAAiC,aAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;;AAEA,IAAMC,aAAa,YAAbA,aAAa;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,CAAnB;;IA6BMC,a;;;;;;;;;;;;;wCAEJ;AAAA;;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAR,MAAAA,UAAU,CAACC,WAAD,EAAaI,aAAb,CAAV,CACGI,IADH,CACQ,UAAAC,IAAI,EAAI;AACZH,QAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,YAAMC,KAAK,GAAC,IAAIC,GAAJ,EAAZ;AACAF,QAAAA,IAAI,CAACG,MAAL,CAAYC,QAAZ,CAAqBC,KAArB,CAA2BC,GAA3B,CAA+B,gBAC/B;AAAA,cADiCC,IACjC,QADiCA,IACjC;AACEN,UAAAA,KAAK,CAACO,GAAN,CAAUD,IAAI,CAACE,EAAf,EAAkBF,IAAlB;AACD,SAHD;;AAIA,QAAA,KAAI,CAACG,KAAL,CAAWC,YAAX,CAAwBV,KAAxB;AACD,OATH;AAWD;;;6BACO;AACNJ,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+B,KAAKY,KAAL,CAAWT,KAA1C;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEC,KAAKS,KAAL,CAAWT,KAAX,CAAiBW,IAAjB,GAAsB,CAAtB,GAAyB,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWT,KAA5B;AAAmC,QAAA,SAAS,EAAE,KAAKS,KAAL,CAAWG,SAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAzB,GAA+F,EAFhG,CADF;AAOD;;;;EAzByBzB,S;;AA4B5B,IAAM0B,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EACxB;AACE,SAAO;AACLd,IAAAA,KAAK,EAACc,KAAK,CAACd,KADP;AAELe,IAAAA,OAAO,EAACD,KAAK,CAACC;AAFT,GAAP;AAID,CAND;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAC3B;AACE,SAAO;AACLL,IAAAA,SAAS,EAAE,mBAACM,IAAD;AAAA,aAAQD,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC1B,WAAW,CAAC2B,QAAlB;AAA2BF,QAAAA,IAAI,EAACA;AAAhC,OAAD,CAAhB;AAAA,KADN;AAELR,IAAAA,YAAY,EAAE,sBAACV,KAAD;AAAA,aAASiB,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC1B,WAAW,CAAC4B,WAAlB;AAA8BrB,QAAAA,KAAK,EAACA;AAApC,OAAD,CAAjB;AAAA;AAFT,GAAP;AAID,CAND;;AASA,eAAeR,OAAO,CAACqB,eAAD,EAAiBG,kBAAjB,CAAP,CAA4CrB,aAA5C,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\nimport {graphql,fetchQuery} from 'react-relay';\nimport environment from '../Environment';\nimport BookList from './BookList';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../store/actions';\n\nconst allBooksQuery = graphql`\nquery BookContainerQuery\n{\nviewer{\n  allBooks {\n    edges\n    {\n      node\n      {\n        id\n        title\n        description\n        author{name}\n        comments{\n          user{\n            id\n            fullname\n          }\n          comment\n          commentdate\n        }\n\n      }\n    }\n  }\n}\n}\n`\n\nclass BookContainer extends Component {\n  componentDidMount()\n  {\n    console.log(\"trying to fetch books\");\n    fetchQuery(environment,allBooksQuery)\n      .then(data => {\n        console.log(data);\n        const books=new Map();\n        data.viewer.allBooks.edges.map(({node})=>\n        {\n          books.set(node.id,node);\n        })\n        this.props.onFetchBooks(books);\n      });\n\n  }\n  render(){\n    console.log(\"books container \",this.props.books);\n    return(\n      <div>\n        <p className=\"heading\">Books</p>\n      {this.props.books.size>0? <BookList books={this.props.books} onAddBook={this.props.onAddBook}/>:''}\n    </div>\n    )\n\n  }\n}\n\nconst mapStateToProps = (state)=>\n{\n  return {\n    books:state.books,\n    authors:state.authors\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>\n{\n  return {\n    onAddBook: (book)=>dispatch({type:actionTypes.ADD_BOOK,book:book}),\n    onFetchBooks: (books)=>dispatch({type:actionTypes.FETCH_BOOKS,books:books})\n  }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(BookContainer);\n"]},"metadata":{},"sourceType":"module"}