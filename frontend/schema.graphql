schema {
  query: Query
  mutation: Mutations
}

input AddAuthorInput {
  author: CreateAuthorType
  clientMutationId: String
}

type AddAuthorPayload {
  author: AuthorType
  clientMutationId: String
}

input AddBookInput {
  book: CreateBookType
  clientMutationId: String
}

type AddBookPayload {
  book: BookType
  clientMutationId: String
}

input AddCommentInput {
  comment: CreateCommentType
  clientMutationId: String
}

type AddCommentPayload {
  book: BookType
  clientMutationId: String
}

input AddUserInput {
  user: CreateUserType
  clientMutationId: String
}

type AddUserPayload {
  user: UserType
  clientMutationId: String
}

# return Author Type
type AuthorType implements Node {
  # The ID of an object
  id: ID!

  # name of author
  name: String!

  # age of author
  age: Int!

  # birth place of author
  birthPlace: String!

  # books written by author
  books: [BookType]
}

# A connection to a list of items.
type AuthorTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AuthorTypeEdge]
}

# An edge in a connection.
type AuthorTypeEdge {
  # The item at the end of the edge
  node: AuthorType

  # A cursor for use in pagination
  cursor: String!
}

type AuthorViewer {
  allAuthors(after: String, first: Int, before: String, last: Int): AuthorTypeConnection!
  id: ID!
}

# return book Type
type BookType implements Node {
  # The ID of an object
  id: ID!

  # title of book
  title: String!

  # description of book
  description: String!

  # author of book
  author: AuthorType

  # comments on book
  comments: [CommentType]
}

# A connection to a list of items.
type BookTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [BookTypeEdge]
}

# An edge in a connection.
type BookTypeEdge {
  # The item at the end of the edge
  node: BookType

  # A cursor for use in pagination
  cursor: String!
}

# return Comment Type
type CommentType {
  # Commenter user
  user: UserType

  # title of book
  comment: String!

  # date time of comment
  commentdate: String!
}

# return Author Create Type
input CreateAuthorType {
  name: String!
  age: Int!
  birthPlace: String!
}

# return Create Book Type
input CreateBookType {
  title: String!
  description: String!
  authorid: ID!
}

# return Create Comment Type
input CreateCommentType {
  bookid: ID!
  userid: ID!
  comment: String!
}

# return User Create Type
input CreateUserType {
  username: String!
  email: String!
  password: String!
  fullname: String!
}

input DeleteAuthorInput {
  id: ID
  clientMutationId: String
}

type DeleteAuthorPayload {
  id: ID
  clientMutationId: String
}

input DeleteBookInput {
  id: ID
  clientMutationId: String
}

type DeleteBookPayload {
  id: ID
  clientMutationId: String
}

input LoginUserInput {
  username: String
  password: String
  clientMutationId: String
}

type LoginUserPayload {
  token: String
  clientMutationId: String
}

# Mutations for our app
type Mutations {
  addUser(input: AddUserInput!): AddUserPayload
  loginUser(input: LoginUserInput!): LoginUserPayload
  addAuthor(input: AddAuthorInput!): AddAuthorPayload
  addBook(input: AddBookInput!): AddBookPayload
  addComment(input: AddCommentInput!): AddCommentPayload
  deleteBook(input: DeleteBookInput!): DeleteBookPayload
  deleteAuthor(input: DeleteAuthorInput!): DeleteAuthorPayload
  updateBook(input: UpdateBookInput!): UpdateBookPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Query interface for our app
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Query single user
  user(id: String): UserType
  users(after: String, first: Int, before: String, last: Int): UserTypeConnection
  author(id: String): AuthorType
  authors(after: String, first: Int, before: String, last: Int): AuthorTypeConnection
  book(id: String): BookType
  books(after: String, first: Int, before: String, last: Int): BookTypeConnection

  # Viewer pattern implementation
  viewer: Viewer!

  # Viewer pattern implementation
  authorviewer: AuthorViewer!
}

input UpdateBookInput {
  book: UpdateBookType
  clientMutationId: String
}

type UpdateBookPayload {
  book: BookType
  clientMutationId: String
}

# return Update Book Type
input UpdateBookType {
  id: ID
  title: String
  description: String
  authorid: ID
}

# return User Type
type UserType implements Node {
  # The ID of an object
  id: ID!

  # username of user
  username: String!

  # email of user
  email: String!

  # full name of user
  fullname: String!
}

# A connection to a list of items.
type UserTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserTypeEdge]
}

# An edge in a connection.
type UserTypeEdge {
  # The item at the end of the edge
  node: UserType

  # A cursor for use in pagination
  cursor: String!
}

type Viewer {
  allBooks(after: String, first: Int, before: String, last: Int, order: String): BookTypeConnection!
  id: ID!
}

