{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n/**\n * Runtime function to correspond to the `graphql` tagged template function.\n * All calls to this function should be transformed by the plugin.\n */\n// The type of a graphql`...` tagged template expression.\n\nfunction graphql(strings) {\n  !false ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'graphql: Unexpected invocation at runtime. Either the Babel transform ' + 'was not set up, or it failed to identify this call site. Make sure it ' + 'is being used verbatim as `graphql`.') : require('fbjs/lib/invariant')(false) : void 0;\n}\n\nfunction getNode(taggedNode) {\n  var fn = typeof taggedNode === 'function' ? taggedNode : taggedNode.modern; // Support for classic raw nodes (used in test mock)\n\n  if (typeof fn !== 'function') {\n    return taggedNode;\n  }\n\n  return fn();\n}\n\nfunction getFragment(taggedNode) {\n  var fragment = getNode(taggedNode);\n  !(typeof fragment === 'object' && fragment !== null && fragment.kind === require('./RelayConcreteNode').FRAGMENT) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernGraphQLTag: Expected a fragment, got `%s`.', JSON.stringify(fragment)) : require('fbjs/lib/invariant')(false) : void 0;\n  return fragment;\n}\n\nfunction getRequest(taggedNode) {\n  var request = getNode(taggedNode);\n  !(typeof request === 'object' && request !== null && (request.kind === require('./RelayConcreteNode').REQUEST || request.kind === require('./RelayConcreteNode').BATCH_REQUEST)) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayModernGraphQLTag: Expected a request, got `%s`.', JSON.stringify(request)) : require('fbjs/lib/invariant')(false) : void 0;\n  return request;\n}\n\nmodule.exports = {\n  getFragment: getFragment,\n  getRequest: getRequest,\n  graphql: graphql\n};","map":null,"metadata":{},"sourceType":"script"}