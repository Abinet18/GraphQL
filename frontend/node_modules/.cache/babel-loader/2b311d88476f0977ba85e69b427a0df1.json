{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _defineProperty3 = _interopRequireDefault(require('babel-runtime/helpers/defineProperty'));\n\nvar _extends4 = _interopRequireDefault(require('babel-runtime/helpers/extends'));\n\nvar _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n *\n * If handleStrippedNulls is true, will replace fields on the Selector that\n * are not present in the response with null. Otherwise will leave fields unset.\n */\n\n\nfunction normalize(recordSource, selector, response) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    handleStrippedNulls: false\n  };\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer = function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    (0, _classCallCheck3['default'])(this, RelayResponseNormalizer);\n    this._handleFieldPayloads = [];\n    this._deferrableSelections = new Set();\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._handleStrippedNulls = options.handleStrippedNulls;\n  }\n\n  RelayResponseNormalizer.prototype.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : require('fbjs/lib/invariant')(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      fieldPayloads: this._handleFieldPayloads,\n      deferrableSelections: this._deferrableSelections\n    };\n  };\n\n  RelayResponseNormalizer.prototype._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : require('fbjs/lib/invariant')(false) : void 0;\n    return this._variables[name];\n  };\n\n  RelayResponseNormalizer.prototype._getRecordType = function _getRecordType(data) {\n    var typeName = data[require('./RelayStoreUtils').TYPENAME_KEY];\n\n    !(typeName != null) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : require('fbjs/lib/invariant')(false) : void 0;\n    return typeName;\n  };\n\n  RelayResponseNormalizer.prototype._traverseSelections = function _traverseSelections(node, record, data) {\n    var _this = this;\n\n    node.selections.forEach(function (selection) {\n      if (selection.kind === require('./RelayConcreteNode').SCALAR_FIELD || selection.kind === require('./RelayConcreteNode').LINKED_FIELD) {\n        _this._normalizeField(node, selection, record, data);\n      } else if (selection.kind === require('./RelayConcreteNode').CONDITION) {\n        var conditionValue = _this._getVariableValue(selection.condition);\n\n        if (conditionValue === selection.passingValue) {\n          _this._traverseSelections(selection, record, data);\n        }\n      } else if (selection.kind === require('./RelayConcreteNode').INLINE_FRAGMENT) {\n        var typeName = require('./RelayModernRecord').getType(record);\n\n        if (typeName === selection.type) {\n          _this._traverseSelections(selection, record, data);\n        }\n      } else if (selection.kind === require('./RelayConcreteNode').LINKED_HANDLE || selection.kind === require('./RelayConcreteNode').SCALAR_HANDLE) {\n        var args = selection.args ? require('./RelayStoreUtils').getArgumentValues(selection.args, _this._variables) : {};\n\n        var fieldKey = require('./RelayStoreUtils').getStorageKey(selection, _this._variables);\n\n        var handleKey = require('./RelayStoreUtils').getHandleStorageKey(selection, _this._variables);\n\n        _this._handleFieldPayloads.push({\n          args: args,\n          dataID: require('./RelayModernRecord').getDataID(record),\n          fieldKey: fieldKey,\n          handle: selection.handle,\n          handleKey: handleKey\n        });\n      } else if (selection.kind === require('./RelayConcreteNode').DEFERRABLE_FRAGMENT_SPREAD) {\n        var dataID = require('./RelayModernRecord').getDataID(record);\n\n        var value = require('./RelayModernRecord').getValue(record, selection.storageKey);\n\n        !(typeof value === 'string') ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'expected ID at %s', selection.storageKey) : require('fbjs/lib/invariant')(false) : void 0;\n        var variables = selection.args ? require('./RelayStoreUtils').getArgumentValues(selection.args, (0, _extends4['default'])({}, _this._variables, (0, _defineProperty3['default'])({}, selection.rootFieldVariable, value))) : {};\n\n        var key = require('./deferrableFragmentKey')(dataID, selection.name, variables);\n\n        _this._deferrableSelections.add(key);\n      } else {\n        !false ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : require('fbjs/lib/invariant')(false) : void 0;\n      }\n    });\n  };\n\n  RelayResponseNormalizer.prototype._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : require('fbjs/lib/invariant')(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n\n    var storageKey = require('./RelayStoreUtils').getStorageKey(selection, this._variables);\n\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined && !this._handleStrippedNulls) {\n        // If we're not stripping nulls, undefined fields are unset\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(parent.kind === require('./RelayConcreteNode').LINKED_FIELD && parent.concreteType == null ? true : Object.prototype.hasOwnProperty.call(data, responseKey), 'RelayResponseNormalizer(): Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n      }\n\n      require('./RelayModernRecord').setValue(record, storageKey, null);\n\n      return;\n    }\n\n    if (selection.kind === require('./RelayConcreteNode').SCALAR_FIELD) {\n      require('./RelayModernRecord').setValue(record, storageKey, fieldValue);\n    } else if (selection.plural) {\n      this._normalizePluralLink(selection, record, storageKey, fieldValue);\n    } else {\n      this._normalizeLink(selection, record, storageKey, fieldValue);\n    }\n  };\n\n  RelayResponseNormalizer.prototype._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : require('fbjs/lib/invariant')(false) : void 0;\n\n    var nextID = fieldValue.id || // Reuse previously generated client IDs\n    require('./RelayModernRecord').getLinkedRecordID(record, storageKey) || require('./generateRelayClientID')(require('./RelayModernRecord').getDataID(record), storageKey);\n\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : require('fbjs/lib/invariant')(false) : void 0;\n\n    require('./RelayModernRecord').setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      var typeName = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = require('./RelayModernRecord').create(nextID, typeName);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== 'production') {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    }\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  RelayResponseNormalizer.prototype._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this2 = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : require('fbjs/lib/invariant')(false) : void 0;\n\n    var prevIDs = require('./RelayModernRecord').getLinkedRecordIDs(record, storageKey);\n\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      // validate response data\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : require('fbjs/lib/invariant')(false) : void 0;\n\n      var nextID = item.id || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs\n      require('./generateRelayClientID')(require('./RelayModernRecord').getDataID(record), storageKey, nextIndex);\n\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : require('fbjs/lib/invariant')(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this2._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        var typeName = field.concreteType || _this2._getRecordType(item);\n\n        nextRecord = require('./RelayModernRecord').create(nextID, typeName);\n\n        _this2._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== 'production') {\n        _this2._validateRecordType(nextRecord, field, item);\n      }\n\n      _this2._traverseSelections(field, nextRecord, item);\n    });\n\n    require('./RelayModernRecord').setLinkedRecordIDs(record, storageKey, nextIDs);\n  };\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n\n\n  RelayResponseNormalizer.prototype._validateRecordType = function _validateRecordType(record, field, payload) {\n    var typeName = field.concreteType || this._getRecordType(payload);\n\n    process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(require('./RelayModernRecord').getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'be consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', require('./RelayModernRecord').getDataID(record), require('./RelayStoreUtils').TYPENAME_KEY, require('./RelayModernRecord').getType(record), typeName) : void 0;\n  };\n\n  return RelayResponseNormalizer;\n}(); // eslint-disable-next-line no-func-assign\n\n\nnormalize = require('./RelayProfiler').instrument('RelayResponseNormalizer.normalize', normalize);\nmodule.exports = {\n  normalize: normalize\n};","map":null,"metadata":{},"sourceType":"script"}