{"ast":null,"code":"import _classCallCheck from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/components/AuthorContainer.js\";\nimport React, { Component } from 'react';\nimport { graphql } from 'react-relay';\nimport environment from '../Environment';\nimport { connect } from 'react-redux';\nimport AuthorList from './AuthorList';\nimport * as actionTypes from '../store/actions';\n\nvar allAuthorsQuery = function allAuthorsQuery() {\n  var node = require(\"./__generated__/AuthorContainerQuery.graphql\");\n\n  if (node.hash && node.hash !== \"a63bdeb8b1646f6de677fe5e235ae4e7\") {\n    console.error(\"The definition of 'AuthorContainerQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n  }\n\n  return require(\"./__generated__/AuthorContainerQuery.graphql\");\n};\n\nvar AuthorContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AuthorContainer, _Component);\n\n  function AuthorContainer() {\n    _classCallCheck(this, AuthorContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AuthorContainer).apply(this, arguments));\n  }\n\n  _createClass(AuthorContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      console.log(\"trying to fetch authors\");\n      fetchQuery(environment, allAuthorsQuery).then(function (data) {\n        console.log(data);\n        var authors = new Map();\n        data.authorviewer.allAuthors.edges.map(function (_ref) {\n          var node = _ref.node;\n          authors.set(node.id, node);\n        });\n\n        _this.props.onFetchAuthors(authors);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Authors\"), React.createElement(AuthorList, {\n        viewer: props.authors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AuthorContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authors: state.authors\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchAuthors: function onFetchAuthors(authors) {\n      return dispatch({\n        type: actionTypes.FETCH_AUTHORS,\n        authors: authors\n      });\n    },\n    onAddAuthor: function onAddAuthor(author) {\n      return dispatch({\n        type: actionTypes.ADD_AUTHOR,\n        author: author\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthorContainer);","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/components/AuthorContainer.js"],"names":["React","Component","graphql","environment","connect","AuthorList","actionTypes","allAuthorsQuery","AuthorContainer","console","log","fetchQuery","then","data","authors","Map","authorviewer","allAuthors","edges","map","node","set","id","props","onFetchAuthors","mapStateToProps","state","mapDispatchToProps","dispatch","type","FETCH_AUTHORS","onAddAuthor","author","ADD_AUTHOR"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,UAAP,MAAwB,cAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;;AAGA,IAAMC,eAAe,YAAfA,eAAe;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,CAArB;;IAQMC,e;;;;;;;;;;;;;wCAEJ;AAAA;;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAC,MAAAA,UAAU,CAACR,WAAD,EAAaI,eAAb,CAAV,CACGK,IADH,CACQ,UAAAC,IAAI,EAAI;AACZJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACA,YAAMC,OAAO,GAAC,IAAIC,GAAJ,EAAd;AACAF,QAAAA,IAAI,CAACG,YAAL,CAAkBC,UAAlB,CAA6BC,KAA7B,CAAmCC,GAAnC,CAAuC,gBACvC;AAAA,cADyCC,IACzC,QADyCA,IACzC;AACEN,UAAAA,OAAO,CAACO,GAAR,CAAYD,IAAI,CAACE,EAAjB,EAAoBF,IAApB;AACD,SAHD;;AAIA,QAAA,KAAI,CAACG,KAAL,CAAWC,cAAX,CAA0BV,OAA1B;AACD,OATH;AAWD;;;6BACO;AACR,aACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEA,oBAAC,UAAD;AAAY,QAAA,MAAM,EAAES,KAAK,CAACT,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CADN;AAMG;;;;EAvByBb,S;;AA2B9B,IAAMwB,eAAe,GAAE,SAAjBA,eAAiB,CAACC,KAAD,EAAU;AAC/B,SAAO;AACHZ,IAAAA,OAAO,EAAEY,KAAK,CAACZ;AADZ,GAAP;AAGD,CAJD;;AAMA,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD,EAAa;AACtC,SAAO;AACLJ,IAAAA,cAAc,EAAG,wBAAAV,OAAO;AAAA,aAAIc,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAACvB,WAAW,CAACwB,aAAlB;AAAgChB,QAAAA,OAAO,EAACA;AAAxC,OAAD,CAAZ;AAAA,KADnB;AAELiB,IAAAA,WAAW,EAAG,qBAAAC,MAAM;AAAA,aAAGJ,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAACvB,WAAW,CAAC2B,UAAlB;AAA6BD,QAAAA,MAAM,EAACA;AAApC,OAAD,CAAX;AAAA;AAFf,GAAP;AAID,CALD;;AAOA,eAAe5B,OAAO,CAACqB,eAAD,EAAiBE,kBAAjB,CAAP,CAA4CnB,eAA5C,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {graphql} from 'react-relay';\nimport environment from '../Environment';\nimport { connect } from 'react-redux';\n\nimport AuthorList  from './AuthorList';\nimport * as actionTypes from '../store/actions';\n\n\nconst allAuthorsQuery = graphql`\nquery AuthorContainerQuery\n{\nauthorviewer{\n  ...AuthorList_viewer\n}\n}\n`\nclass AuthorContainer extends Component {\n  componentDidMount()\n  {\n    console.log(\"trying to fetch authors\");\n    fetchQuery(environment,allAuthorsQuery)\n      .then(data => {\n        console.log(data);\n        const authors=new Map();\n        data.authorviewer.allAuthors.edges.map(({node})=>\n        {\n          authors.set(node.id,node);\n        })\n        this.props.onFetchAuthors(authors);\n      });\n\n  }\n  render(){\n  return (\n        <div>\n          <p className=\"heading\">Authors</p>\n        <AuthorList viewer={props.authors}/>\n        </div>\n      )\n    }\n\n}\n\nconst mapStateToProps= (state)=> {\n  return {\n      authors: state.authors\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=> {\n  return {\n    onFetchAuthors : authors => dispatch({type:actionTypes.FETCH_AUTHORS,authors:authors}),\n    onAddAuthor : author=> dispatch({type:actionTypes.ADD_AUTHOR,author:author})\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(AuthorContainer);\n"]},"metadata":{},"sourceType":"module"}