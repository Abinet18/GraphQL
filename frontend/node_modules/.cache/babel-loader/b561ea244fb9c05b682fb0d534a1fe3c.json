{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));\n\nvar _toConsumableArray3 = _interopRequireDefault(require('babel-runtime/helpers/toConsumableArray'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar queryID = 1;\n/**\n * A network logger transaction is an object that you can construct, pass around\n * and add logs to, ultimately calling its commit method when you're done.\n * Different transactions can have different commit logic. One might use\n * `console.log`. Another might ping a logging endpoint. Another might add some\n * autogenerated logs before doing either of the foregoing.\n */\n\nvar RelayNetworkLoggerTransaction = function () {\n  function RelayNetworkLoggerTransaction(_ref) {\n    var request = _ref.request,\n        variables = _ref.variables,\n        cacheConfig = _ref.cacheConfig,\n        uploadables = _ref.uploadables;\n    (0, _classCallCheck3['default'])(this, RelayNetworkLoggerTransaction);\n    this._hasCommittedLogs = false;\n    this._logs = [];\n    this._cacheConfig = cacheConfig;\n    this._id = queryID++;\n    this._request = request;\n    this._uploadables = uploadables;\n    this._variables = variables;\n  }\n\n  RelayNetworkLoggerTransaction.prototype.addLog = function addLog(label) {\n    for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      values[_key - 1] = arguments[_key];\n    }\n\n    this._logs.push({\n      label: label,\n      values: values\n    });\n  };\n\n  RelayNetworkLoggerTransaction.prototype.clearLogs = function clearLogs() {\n    this._logs = [];\n  };\n\n  RelayNetworkLoggerTransaction.prototype.printLogs = function printLogs(error, payload, status) {\n    /* eslint-disable no-console */\n    var transactionId = this.getIdentifier();\n    console.groupCollapsed && console.groupCollapsed('%c' + transactionId, error ? 'color:red' : '');\n    console.timeEnd && console.timeEnd(transactionId);\n    this.getLogsToPrint(error, payload, status).forEach(function (_ref2) {\n      var _console;\n\n      var label = _ref2.label,\n          values = _ref2.values;\n\n      (_console = console).log.apply(_console, [label + ':'].concat((0, _toConsumableArray3['default'])(values)));\n    });\n    console.groupEnd && console.groupEnd();\n    /* eslint-enable no-console */\n  };\n\n  RelayNetworkLoggerTransaction.prototype.commitLogs = function commitLogs(error, payload, status) {\n    !(this._hasCommittedLogs === false) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'The logs for transaction #' + this._id + ' have already been committed.') : require('fbjs/lib/invariant')(false) : void 0;\n    this.printLogs(error, payload, status);\n    this.markCommitted();\n  };\n\n  RelayNetworkLoggerTransaction.prototype.markCommitted = function markCommitted() {\n    this._hasCommittedLogs = true;\n  };\n\n  RelayNetworkLoggerTransaction.prototype.flushLogs = function flushLogs(error, payload, status) {\n    !(this._hasCommittedLogs === false) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'The logs for transaction #' + this._id + ' have already been committed.') : require('fbjs/lib/invariant')(false) : void 0;\n    this.printLogs(error, payload, status);\n    this.clearLogs();\n  };\n\n  RelayNetworkLoggerTransaction.prototype.getCacheConfig = function getCacheConfig() {\n    return this._cacheConfig;\n  };\n\n  RelayNetworkLoggerTransaction.prototype.getIdentifier = function getIdentifier() {\n    return '[' + this._id + '] Relay Modern: ' + this._request.name;\n  };\n\n  RelayNetworkLoggerTransaction.prototype.getLogsToPrint = function getLogsToPrint(error, payload, status) {\n    return this._logs;\n  };\n\n  RelayNetworkLoggerTransaction.prototype.getRequest = function getRequest() {\n    return this._request;\n  };\n\n  RelayNetworkLoggerTransaction.prototype.getUploadables = function getUploadables() {\n    return this._uploadables;\n  };\n\n  RelayNetworkLoggerTransaction.prototype.getVariables = function getVariables() {\n    return this._variables;\n  };\n\n  return RelayNetworkLoggerTransaction;\n}();\n\nmodule.exports = RelayNetworkLoggerTransaction;","map":null,"metadata":{},"sourceType":"script"}