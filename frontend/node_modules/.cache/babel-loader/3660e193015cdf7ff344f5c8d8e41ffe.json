{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n/**\n * Converts a FetchFunction into an ExecuteFunction for use by RelayNetwork.\n */\n\nfunction convertFetch(fn) {\n  return function fetch(request, variables, cacheConfig, uploadables) {\n    var result = fn(request, variables, cacheConfig, uploadables); // Note: We allow FetchFunction to directly return Error to indicate\n    // a failure to fetch. To avoid handling this special case throughout the\n    // Relay codebase, it is explicitly handled here.\n\n    if (result instanceof Error) {\n      return require('./RelayObservable').create(function (sink) {\n        return sink.error(result);\n      });\n    }\n\n    return require('./RelayObservable').from(result).map(function (value) {\n      return convertToExecutePayload(request, variables, value);\n    });\n  };\n}\n/**\n * Converts a SubscribeFunction into an ExecuteFunction for use by RelayNetwork.\n */\n\n\nfunction convertSubscribe(fn) {\n  return function subscribe(operation, variables, cacheConfig) {\n    return require('./RelayObservable').fromLegacy(function (observer) {\n      return fn(operation, variables, cacheConfig, observer);\n    }).map(function (value) {\n      return convertToExecutePayload(operation, variables, value);\n    });\n  };\n}\n/**\n * Given a value which might be a plain GraphQLResponse, coerce to always return\n * an ExecutePayload. A GraphQLResponse may be returned directly from older or\n * simpler Relay Network implementations.\n */\n\n\nfunction convertToExecutePayload(request, variables, value) {\n  if (!value.data && !value.errors && value.response) {\n    if (!value.operation) {\n      process.env.NODE_ENV !== 'production' ? require('fbjs/lib/warning')(false, 'ConvertToExecuteFunction: execute payload contains response but ' + 'is missing operation.') : void 0;\n      return createExecutePayload(request, variables, value.response);\n    }\n\n    return value;\n  }\n\n  return createExecutePayload(request, variables, value);\n}\n\nfunction createExecutePayload(request, variables, response) {\n  if (request.kind === require('./RelayConcreteNode').BATCH_REQUEST) {\n    throw new Error('ConvertToExecuteFunction: Batch request must return ExecutePayload.');\n  }\n\n  return {\n    operation: request.operation,\n    variables: variables,\n    response: response\n  };\n}\n\nmodule.exports = {\n  convertFetch: convertFetch,\n  convertSubscribe: convertSubscribe\n};","map":null,"metadata":{},"sourceType":"script"}