{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n/**\n * Higher-level helper function to execute a mutation against a specific\n * environment.\n */\n\nfunction applyRelayModernOptimisticMutation(environment, config) {\n  !require('./isRelayModernEnvironment')(environment) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'commitRelayModernMutation: expect `environment` to be an instance of ' + '`RelayModernEnvironment`.') : require('fbjs/lib/invariant')(false) : void 0;\n  var _environment$unstable = environment.unstable_internal,\n      createOperationSelector = _environment$unstable.createOperationSelector,\n      getRequest = _environment$unstable.getRequest;\n  var mutation = getRequest(config.mutation);\n\n  if (mutation.operationKind !== 'mutation') {\n    throw new Error('commitRelayModernMutation: Expected mutation operation');\n  }\n\n  var optimisticUpdater = config.optimisticUpdater;\n  var configs = config.configs,\n      optimisticResponse = config.optimisticResponse,\n      variables = config.variables;\n  var operation = createOperationSelector(mutation, variables);\n\n  if (configs) {\n    var _RelayDeclarativeMuta = require('./RelayDeclarativeMutationConfig').convert(configs, mutation, optimisticUpdater);\n\n    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;\n  }\n\n  return environment.applyUpdate({\n    operation: operation,\n    selectorStoreUpdater: optimisticUpdater,\n    response: optimisticResponse\n  });\n}\n\nmodule.exports = applyRelayModernOptimisticMutation;","map":null,"metadata":{},"sourceType":"script"}