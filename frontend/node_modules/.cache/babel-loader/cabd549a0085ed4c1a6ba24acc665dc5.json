{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict-local\n * @format\n */\n'use strict';\n\nvar _extends3 = _interopRequireDefault(require('babel-runtime/helpers/extends'));\n\nvar _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/**\n * @public\n *\n * An implementation of the `Store` interface defined in `RelayStoreTypes`.\n *\n * Note that a Store takes ownership of all records provided to it: other\n * objects may continue to hold a reference to such records but may not mutate\n * them. The static Relay core is architected to avoid mutating records that may have been\n * passed to a store: operations that mutate records will either create fresh\n * records or clone existing records and modify the clones. Record immutability\n * is also enforced in development mode by freezing all records passed to a store.\n */\n\n\nvar RelayMarkSweepStore = function () {\n  function RelayMarkSweepStore(source) {\n    (0, _classCallCheck3['default'])(this, RelayMarkSweepStore); // Prevent mutation of a record from outside the store.\n\n    if (process.env.NODE_ENV !== 'production') {\n      var storeIDs = source.getRecordIDs();\n\n      for (var ii = 0; ii < storeIDs.length; ii++) {\n        var record = source.get(storeIDs[ii]);\n\n        if (record) {\n          require('./RelayModernRecord').freeze(record);\n        }\n      }\n    }\n\n    this._gcEnabled = true;\n    this._hasScheduledGC = false;\n    this._index = 0;\n    this._recordSource = source;\n    this._roots = new Map();\n    this._subscriptions = new Set();\n    this._updatedRecordIDs = {};\n  }\n\n  RelayMarkSweepStore.prototype.getSource = function getSource() {\n    return this._recordSource;\n  };\n\n  RelayMarkSweepStore.prototype.check = function check(selector) {\n    return require('./RelayDataLoader').check(this._recordSource, this._recordSource, selector, []);\n  };\n\n  RelayMarkSweepStore.prototype.retain = function retain(selector) {\n    var _this = this;\n\n    var index = this._index++;\n\n    var dispose = function dispose() {\n      _this._roots['delete'](index);\n\n      _this._scheduleGC();\n    };\n\n    this._roots.set(index, selector);\n\n    return {\n      dispose: dispose\n    };\n  };\n\n  RelayMarkSweepStore.prototype.lookup = function lookup(selector) {\n    var snapshot = require('./RelayReader').read(this._recordSource, selector);\n\n    if (process.env.NODE_ENV !== 'production') {\n      require('./deepFreeze')(snapshot);\n    }\n\n    return snapshot;\n  };\n\n  RelayMarkSweepStore.prototype.notify = function notify() {\n    var _this2 = this;\n\n    this._subscriptions.forEach(function (subscription) {\n      _this2._updateSubscription(subscription);\n    });\n\n    this._updatedRecordIDs = {};\n  };\n\n  RelayMarkSweepStore.prototype.publish = function publish(source) {\n    updateTargetFromSource(this._recordSource, source, this._updatedRecordIDs);\n  };\n\n  RelayMarkSweepStore.prototype.subscribe = function subscribe(snapshot, callback) {\n    var _this3 = this;\n\n    var subscription = {\n      callback: callback,\n      snapshot: snapshot\n    };\n\n    var dispose = function dispose() {\n      _this3._subscriptions['delete'](subscription);\n    };\n\n    this._subscriptions.add(subscription);\n\n    return {\n      dispose: dispose\n    };\n  }; // Internal API\n\n\n  RelayMarkSweepStore.prototype.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {\n    return this._updatedRecordIDs;\n  };\n\n  RelayMarkSweepStore.prototype._updateSubscription = function _updateSubscription(subscription) {\n    var callback = subscription.callback,\n        snapshot = subscription.snapshot;\n\n    if (!require('./hasOverlappingIDs')(snapshot, this._updatedRecordIDs)) {\n      return;\n    }\n\n    var _RelayReader$read = require('./RelayReader').read(this._recordSource, snapshot),\n        data = _RelayReader$read.data,\n        seenRecords = _RelayReader$read.seenRecords;\n\n    var nextData = require('./recycleNodesInto')(snapshot.data, data);\n\n    var nextSnapshot = (0, _extends3['default'])({}, snapshot, {\n      data: nextData,\n      seenRecords: seenRecords\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      require('./deepFreeze')(nextSnapshot);\n    }\n\n    subscription.snapshot = nextSnapshot;\n\n    if (nextSnapshot.data !== snapshot.data) {\n      callback(nextSnapshot);\n    }\n  };\n\n  RelayMarkSweepStore.prototype._scheduleGC = function _scheduleGC() {\n    var _this4 = this;\n\n    if (!this._gcEnabled || this._hasScheduledGC) {\n      return;\n    }\n\n    this._hasScheduledGC = true;\n\n    require('fbjs/lib/resolveImmediate')(function () {\n      _this4.__gc();\n\n      _this4._hasScheduledGC = false;\n    });\n  };\n\n  RelayMarkSweepStore.prototype.__gc = function __gc() {\n    var _this5 = this;\n\n    var references = new Set(); // Mark all records that are traversable from a root\n\n    this._roots.forEach(function (selector) {\n      require('./RelayReferenceMarker').mark(_this5._recordSource, selector, references);\n    }); // Short-circuit if *nothing* is referenced\n\n\n    if (!references.size) {\n      this._recordSource.clear();\n\n      return;\n    } // Evict any unreferenced nodes\n\n\n    var storeIDs = this._recordSource.getRecordIDs();\n\n    for (var ii = 0; ii < storeIDs.length; ii++) {\n      var dataID = storeIDs[ii];\n\n      if (!references.has(dataID)) {\n        this._recordSource.remove(dataID);\n      }\n    }\n  }; // Internal hooks to enable/disable garbage collection for experimentation\n\n\n  RelayMarkSweepStore.prototype.__enableGC = function __enableGC() {\n    this._gcEnabled = true;\n  };\n\n  RelayMarkSweepStore.prototype.__disableGC = function __disableGC() {\n    this._gcEnabled = false;\n  };\n\n  return RelayMarkSweepStore;\n}();\n/**\n * Updates the target with information from source, also updating a mapping of\n * which records in the target were changed as a result.\n */\n\n\nfunction updateTargetFromSource(target, source, updatedRecordIDs) {\n  var dataIDs = source.getRecordIDs();\n\n  for (var ii = 0; ii < dataIDs.length; ii++) {\n    var dataID = dataIDs[ii];\n    var sourceRecord = source.get(dataID);\n    var targetRecord = target.get(dataID); // Prevent mutation of a record from outside the store.\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (sourceRecord) {\n        require('./RelayModernRecord').freeze(sourceRecord);\n      }\n    }\n\n    if (sourceRecord === require('./RelayStoreUtils').UNPUBLISH_RECORD_SENTINEL) {\n      // Unpublish a record\n      target.remove(dataID);\n      updatedRecordIDs[dataID] = true;\n    } else if (sourceRecord && targetRecord) {\n      var nextRecord = require('./RelayModernRecord').update(targetRecord, sourceRecord);\n\n      if (nextRecord !== targetRecord) {\n        // Prevent mutation of a record from outside the store.\n        if (process.env.NODE_ENV !== 'production') {\n          require('./RelayModernRecord').freeze(nextRecord);\n        }\n\n        updatedRecordIDs[dataID] = true;\n        target.set(dataID, nextRecord);\n      }\n    } else if (sourceRecord === null) {\n      target['delete'](dataID);\n\n      if (targetRecord !== null) {\n        updatedRecordIDs[dataID] = true;\n      }\n    } else if (sourceRecord) {\n      target.set(dataID, sourceRecord);\n      updatedRecordIDs[dataID] = true;\n    } // don't add explicit undefined\n\n  }\n}\n\nrequire('./RelayProfiler').instrumentMethods(RelayMarkSweepStore.prototype, {\n  lookup: 'RelayMarkSweepStore.prototype.lookup',\n  notify: 'RelayMarkSweepStore.prototype.notify',\n  publish: 'RelayMarkSweepStore.prototype.publish',\n  retain: 'RelayMarkSweepStore.prototype.retain',\n  subscribe: 'RelayMarkSweepStore.prototype.subscribe',\n  __gc: 'RelayMarkSweepStore.prototype.__gc'\n});\n\nmodule.exports = RelayMarkSweepStore;","map":null,"metadata":{},"sourceType":"script"}