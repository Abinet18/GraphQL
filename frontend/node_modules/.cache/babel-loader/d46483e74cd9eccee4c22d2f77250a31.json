{"ast":null,"code":"import _classCallCheck from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/components/BookContainer.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport { graphql, fetchQuery } from 'react-relay';\nimport environment from '../Environment';\nimport BookList from './BookList';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../store/actions';\nimport Immutable from 'immutable';\n\nvar BookContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BookContainer, _Component);\n\n  function BookContainer() {\n    _classCallCheck(this, BookContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BookContainer).apply(this, arguments));\n  }\n\n  _createClass(BookContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"trying to fetch books\");\n\n      if (this.props.books.size == 0) {\n        actionTypes.fetchBooks(this.props.onFetchBooks);\n        actionTypes.fetchAuthors(this.props.onFetchAuthors);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"books container \", this.props.books);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Books\"), this.props.books.size > 0 ? React.createElement(BookList, {\n        books: this.props.books,\n        onAddBook: this.props.onAddBook,\n        onAddComment: this.props.onAddComment,\n        onDeleteBook: this.props.onDeleteBook,\n        onUpdateBook: this.props.onUpdateBook,\n        atuhors: this.props.authors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }) : '');\n    }\n  }]);\n\n  return BookContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    books: state.books,\n    authors: state.authors\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAddBook: function onAddBook(book) {\n      return dispatch({\n        type: actionTypes.ADD_BOOK,\n        book: book\n      });\n    },\n    onFetchBooks: function onFetchBooks(books) {\n      return dispatch({\n        type: actionTypes.FETCH_BOOKS,\n        books: books\n      });\n    },\n    onFetchAuthors: function onFetchAuthors(authors) {\n      return dispatch({\n        type: actionTypes.FETCH_AUTHORS,\n        authors: authors\n      });\n    },\n    onAddComment: function onAddComment(book) {\n      return dispatch({\n        type: actionTypes.UPDATE_BOOK,\n        book: book\n      });\n    },\n    onDeleteBook: function onDeleteBook(bookid) {\n      return dispatch({\n        type: actionTypes.DELETE_BOOK,\n        bookid: bookid\n      });\n    },\n    onUpdateBook: function onUpdateBook(book) {\n      return dispatch({\n        type: actionTypes.UPDATE_BOOK,\n        book: book\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BookContainer);","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/components/BookContainer.js"],"names":["React","Component","graphql","fetchQuery","environment","BookList","connect","actionTypes","Immutable","BookContainer","console","log","props","books","size","fetchBooks","onFetchBooks","fetchAuthors","onFetchAuthors","onAddBook","onAddComment","onDeleteBook","onUpdateBook","authors","mapStateToProps","state","mapDispatchToProps","dispatch","book","type","ADD_BOOK","FETCH_BOOKS","FETCH_AUTHORS","UPDATE_BOOK","bookid","DELETE_BOOK"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport '../App.css';\nimport {graphql,fetchQuery} from 'react-relay';\nimport environment from '../Environment';\nimport BookList from './BookList';\nimport { connect } from 'react-redux';\nimport * as actionTypes from '../store/actions';\nimport Immutable from 'immutable';\n\n\nclass BookContainer extends Component {\n  componentDidMount()\n  {\n    console.log(\"trying to fetch books\");\n    if(this.props.books.size==0)\n    {\n      actionTypes.fetchBooks(this.props.onFetchBooks);\n      actionTypes.fetchAuthors(this.props.onFetchAuthors);\n    }\n\n\n  }\n  render(){\n    console.log(\"books container \",this.props.books);\n    return(\n      <div>\n        <p className=\"heading\">Books</p>\n        {this.props.books.size>0?\n            <BookList books={this.props.books}\n              onAddBook={this.props.onAddBook}\n              onAddComment={this.props.onAddComment}\n              onDeleteBook={this.props.onDeleteBook}\n              onUpdateBook = {this.props.onUpdateBook}\n              atuhors={this.props.authors}\n            />:\n        ''}\n    </div>\n    )\n\n  }\n}\n\nconst mapStateToProps = (state)=>\n{\n  return {\n    books:state.books,\n    authors:state.authors\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>\n{\n  return {\n    onAddBook: (book)=>dispatch({type:actionTypes.ADD_BOOK,book:book}),\n    onFetchBooks: (books)=>dispatch({type:actionTypes.FETCH_BOOKS,books:books}),\n    onFetchAuthors: (authors)=>dispatch({type:actionTypes.FETCH_AUTHORS,authors:authors}),\n    onAddComment : (book)=>dispatch({type:actionTypes.UPDATE_BOOK,book:book}),\n    onDeleteBook: (bookid)=>dispatch({type:actionTypes.DELETE_BOOK,bookid:bookid}),\n    onUpdateBook: (book)=>dispatch({type:actionTypes.UPDATE_BOOK,book:book})\n  }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(BookContainer);\n"]},"metadata":{},"sourceType":"module"}