{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar _defineProperty3 = _interopRequireDefault(require('babel-runtime/helpers/defineProperty'));\n\nvar _extends4 = _interopRequireDefault(require('babel-runtime/helpers/extends'));\n\nvar _classCallCheck3 = _interopRequireDefault(require('babel-runtime/helpers/classCallCheck'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction read(recordSource, selector) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var reader = new RelayReader(recordSource, variables);\n  return reader.read(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReader = function () {\n  function RelayReader(recordSource, variables) {\n    (0, _classCallCheck3['default'])(this, RelayReader);\n    this._recordSource = recordSource;\n    this._seenRecords = {};\n    this._variables = variables;\n  }\n\n  RelayReader.prototype.read = function read(node, dataID) {\n    var data = this._traverse(node, dataID, null);\n\n    return {\n      data: data,\n      dataID: dataID,\n      node: node,\n      seenRecords: this._seenRecords,\n      variables: this._variables\n    };\n  };\n\n  RelayReader.prototype._traverse = function _traverse(node, dataID, prevData) {\n    var record = this._recordSource.get(dataID);\n\n    this._seenRecords[dataID] = record;\n\n    if (record == null) {\n      return record;\n    }\n\n    var data = prevData || {};\n\n    this._traverseSelections(node.selections, record, data);\n\n    return data;\n  };\n\n  RelayReader.prototype._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayReader(): Undefined variable `%s`.', name) : require('fbjs/lib/invariant')(false) : void 0;\n    return this._variables[name];\n  };\n\n  RelayReader.prototype._traverseSelections = function _traverseSelections(selections, record, data) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      if (selection.kind === require('./RelayConcreteNode').SCALAR_FIELD) {\n        _this._readScalar(selection, record, data);\n      } else if (selection.kind === require('./RelayConcreteNode').LINKED_FIELD) {\n        if (selection.plural) {\n          _this._readPluralLink(selection, record, data);\n        } else {\n          _this._readLink(selection, record, data);\n        }\n      } else if (selection.kind === require('./RelayConcreteNode').CONDITION) {\n        var conditionValue = _this._getVariableValue(selection.condition);\n\n        if (conditionValue === selection.passingValue) {\n          _this._traverseSelections(selection.selections, record, data);\n        }\n      } else if (selection.kind === require('./RelayConcreteNode').INLINE_FRAGMENT) {\n        var typeName = require('./RelayModernRecord').getType(record);\n\n        if (typeName != null && typeName === selection.type) {\n          _this._traverseSelections(selection.selections, record, data);\n        }\n      } else if (selection.kind === require('./RelayConcreteNode').FRAGMENT_SPREAD) {\n        _this._createFragmentPointer(selection, record, data, _this._variables);\n      } else if (selection.kind === require('./RelayConcreteNode').DEFERRABLE_FRAGMENT_SPREAD) {\n        _this._createDeferrableFragmentPointer(selection, record, data);\n      } else {\n        !false ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : require('fbjs/lib/invariant')(false) : void 0;\n      }\n    });\n  };\n\n  RelayReader.prototype._readScalar = function _readScalar(field, record, data) {\n    var applicationName = field.alias || field.name;\n\n    var storageKey = require('./RelayStoreUtils').getStorageKey(field, this._variables);\n\n    var value = require('./RelayModernRecord').getValue(record, storageKey);\n\n    data[applicationName] = value;\n  };\n\n  RelayReader.prototype._readLink = function _readLink(field, record, data) {\n    var applicationName = field.alias || field.name;\n\n    var storageKey = require('./RelayStoreUtils').getStorageKey(field, this._variables);\n\n    var linkedID = require('./RelayModernRecord').getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      data[applicationName] = linkedID;\n      return;\n    }\n\n    var prevData = data[applicationName];\n    !(prevData == null || typeof prevData === 'object') ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, require('./RelayModernRecord').getDataID(record), prevData) : require('fbjs/lib/invariant')(false) : void 0;\n    data[applicationName] = this._traverse(field, linkedID, prevData);\n  };\n\n  RelayReader.prototype._readPluralLink = function _readPluralLink(field, record, data) {\n    var _this2 = this;\n\n    var applicationName = field.alias || field.name;\n\n    var storageKey = require('./RelayStoreUtils').getStorageKey(field, this._variables);\n\n    var linkedIDs = require('./RelayModernRecord').getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      data[applicationName] = linkedIDs;\n      return;\n    }\n\n    var prevData = data[applicationName];\n    !(prevData == null || Array.isArray(prevData)) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, require('./RelayModernRecord').getDataID(record), prevData) : require('fbjs/lib/invariant')(false) : void 0;\n    var linkedArray = prevData || [];\n    linkedIDs.forEach(function (linkedID, nextIndex) {\n      if (linkedID == null) {\n        linkedArray[nextIndex] = linkedID;\n        return;\n      }\n\n      var prevItem = linkedArray[nextIndex];\n      !(prevItem == null || typeof prevItem === 'object') ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, require('./RelayModernRecord').getDataID(record), prevItem) : require('fbjs/lib/invariant')(false) : void 0;\n\n      var linkedItem = _this2._traverse(field, linkedID, prevItem);\n\n      linkedArray[nextIndex] = linkedItem;\n    });\n    data[applicationName] = linkedArray;\n  };\n\n  RelayReader.prototype._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data, variables) {\n    var fragmentPointers = data[require('./RelayStoreUtils').FRAGMENTS_KEY];\n\n    if (!fragmentPointers) {\n      fragmentPointers = data[require('./RelayStoreUtils').FRAGMENTS_KEY] = {};\n    }\n\n    !(typeof fragmentPointers === 'object' && fragmentPointers) ? process.env.NODE_ENV !== 'production' ? require('fbjs/lib/invariant')(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : require('fbjs/lib/invariant')(false) : void 0;\n    data[require('./RelayStoreUtils').ID_KEY] = data[require('./RelayStoreUtils').ID_KEY] || require('./RelayModernRecord').getDataID(record);\n    fragmentPointers[fragmentSpread.name] = fragmentSpread.args ? require('./RelayStoreUtils').getArgumentValues(fragmentSpread.args, variables) : {};\n  };\n\n  RelayReader.prototype._createDeferrableFragmentPointer = function _createDeferrableFragmentPointer(deferrableFragment, record, data) {\n    var rootFieldValue = require('./RelayModernRecord').getValue(record, deferrableFragment.storageKey);\n\n    var variables = (0, _extends4['default'])({}, this._variables, (0, _defineProperty3['default'])({}, deferrableFragment.rootFieldVariable, rootFieldValue));\n\n    this._createFragmentPointer(deferrableFragment, record, data, variables);\n  };\n\n  return RelayReader;\n}();\n\nmodule.exports = {\n  read: read\n};","map":null,"metadata":{},"sourceType":"script"}