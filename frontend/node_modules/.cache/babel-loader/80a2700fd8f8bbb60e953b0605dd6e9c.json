{"ast":null,"code":"var _graphql, _graphql2;\n\nimport { graphql, fetchQuery } from 'react-relay';\nimport environment from '../Environment';\nimport Immutable from 'immutable';\nexport var ADD_BOOK = 'ADD_BOOK';\nexport var ADD_COMMENT = 'ADD_COMMENT';\nexport var ADD_AUTHOR = 'ADD_AUTHOR';\nexport var SIGNUP_USER = 'SIGNUP_USER';\nexport var LOGIN_USER = 'LOGIN_USER';\nexport var UPDATE_BOOK = 'UPDATE_BOOK';\nexport var DELETE_BOOK = 'DELETE_BOOK';\nexport var DELETE_AUTHOR = 'DELETE_AUTHOR';\nexport var FETCH_BOOKS = 'FETCH_BOOKS';\nexport var FETCH_AUTHORS = 'FETCH_AUTHORS';\nexport var fetchAuthors = function fetchAuthors(onFetchAuthors) {\n  var allAuthorsQuery = _graphql || (_graphql = function _graphql() {\n    var node = require(\"./__generated__/actionsAuthorsQuery.graphql\");\n\n    if (node.hash && node.hash !== \"d913f7c0e5d22e9ad9819cc5d8a59841\") {\n      console.error(\"The definition of 'actionsAuthorsQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"./__generated__/actionsAuthorsQuery.graphql\");\n  });\n\n  fetchQuery(environment, allAuthorsQuery).then(function (data) {\n    console.log(data);\n    var authors = Immutable.OrderedMap();\n    data.authorviewer.allAuthors.edges.map(function (_ref) {\n      var node = _ref.node;\n      authors = authors.set(node.id, node);\n    });\n    onFetchAuthors(authors);\n  });\n};\nexport var fetchBooks = function fetchBooks(onFetchBooks) {\n  var allBooksQuery = _graphql2 || (_graphql2 = function _graphql2() {\n    var node = require(\"./__generated__/actionsBooksQuery.graphql\");\n\n    if (node.hash && node.hash !== \"44823ed4a72e641d9e3ed5e65b36a67c\") {\n      console.error(\"The definition of 'actionsBooksQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n    }\n\n    return require(\"./__generated__/actionsBooksQuery.graphql\");\n  });\n\n  fetchQuery(environment, allBooksQuery).then(function (data) {\n    console.log(data);\n    var books = Immutable.OrderedMap();\n    data.viewer.allBooks.edges.map(function (_ref2) {\n      var node = _ref2.node;\n      books = books.set(node.id, node);\n    });\n    onFetchBooks(books);\n  });\n};","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/store/actions.js"],"names":["graphql","fetchQuery","environment","Immutable","ADD_BOOK","ADD_COMMENT","ADD_AUTHOR","SIGNUP_USER","LOGIN_USER","UPDATE_BOOK","DELETE_BOOK","DELETE_AUTHOR","FETCH_BOOKS","FETCH_AUTHORS","fetchAuthors","onFetchAuthors","allAuthorsQuery","then","data","console","log","authors","OrderedMap","authorviewer","allAuthors","edges","map","node","set","id","fetchBooks","onFetchBooks","allBooksQuery","books","viewer","allBooks"],"mappings":";;AAAA,SAASA,OAAT,EAAiBC,UAAjB,QAAmC,aAAnC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,WAAW,GAAC,aAAlB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,WAAW,GAAC,aAAlB;AACP,OAAO,IAAMC,WAAW,GAAC,aAAlB;AACP,OAAO,IAAMC,aAAa,GAAC,eAApB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AAGP,OAAO,IAAMC,YAAY,GAAE,SAAdA,YAAc,CAACC,cAAD,EAAkB;AAE3C,MAAMC,eAAe;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,IAArB;;AAyBAf,EAAAA,UAAU,CAACC,WAAD,EAAac,eAAb,CAAV,CACGC,IADH,CACQ,UAAAC,IAAI,EAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAIG,OAAO,GAAClB,SAAS,CAACmB,UAAV,EAAZ;AACAJ,IAAAA,IAAI,CAACK,YAAL,CAAkBC,UAAlB,CAA6BC,KAA7B,CAAmCC,GAAnC,CAAuC,gBACvC;AAAA,UADyCC,IACzC,QADyCA,IACzC;AACEN,MAAAA,OAAO,GAACA,OAAO,CAACO,GAAR,CAAYD,IAAI,CAACE,EAAjB,EAAoBF,IAApB,CAAR;AACD,KAHD;AAIAZ,IAAAA,cAAc,CAACM,OAAD,CAAd;AACD,GATH;AAWD,CAtCM;AAwCP,OAAO,IAAMS,UAAU,GAAE,SAAZA,UAAY,CAACC,YAAD,EACzB;AACE,MAAMC,aAAa;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,IAAnB;;AA8BM/B,EAAAA,UAAU,CAACC,WAAD,EAAa8B,aAAb,CAAV,CACGf,IADH,CACQ,UAAAC,IAAI,EAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAIe,KAAK,GAAC9B,SAAS,CAACmB,UAAV,EAAV;AACAJ,IAAAA,IAAI,CAACgB,MAAL,CAAYC,QAAZ,CAAqBV,KAArB,CAA2BC,GAA3B,CAA+B,iBAC/B;AAAA,UADiCC,IACjC,SADiCA,IACjC;AACEM,MAAAA,KAAK,GAACA,KAAK,CAACL,GAAN,CAAUD,IAAI,CAACE,EAAf,EAAkBF,IAAlB,CAAN;AACD,KAHD;AAIAI,IAAAA,YAAY,CAACE,KAAD,CAAZ;AACD,GATH;AAUP,CA1CM","sourcesContent":["import { graphql,fetchQuery } from 'react-relay';\nimport environment from '../Environment';\nimport Immutable from 'immutable';\nexport const ADD_BOOK = 'ADD_BOOK';\nexport const ADD_COMMENT='ADD_COMMENT';\nexport const ADD_AUTHOR = 'ADD_AUTHOR';\nexport const SIGNUP_USER = 'SIGNUP_USER';\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const UPDATE_BOOK='UPDATE_BOOK';\nexport const DELETE_BOOK='DELETE_BOOK';\nexport const DELETE_AUTHOR='DELETE_AUTHOR';\nexport const FETCH_BOOKS = 'FETCH_BOOKS';\nexport const FETCH_AUTHORS = 'FETCH_AUTHORS';\n\n\nexport const fetchAuthors= (onFetchAuthors)=>{\n\n  const allAuthorsQuery = graphql`\n  query actionsAuthorsQuery\n  {\n  authorviewer{\n    allAuthors(last:100) @connection(key:\"AuthorList_allAuthors\",filters:[])\n    {\n      edges\n      {\n        node\n        {\n          id\n          name\n          age\n          birthPlace\n          books\n          {\n            title\n          }\n        }\n      }\n    }\n  }\n  }\n  `;\n\n  fetchQuery(environment,allAuthorsQuery)\n    .then(data => {\n      console.log(data);\n      let authors=Immutable.OrderedMap();\n      data.authorviewer.allAuthors.edges.map(({node})=>\n      {\n        authors=authors.set(node.id,node);\n      })\n      onFetchAuthors(authors);\n    });\n\n}\n\nexport const fetchBooks= (onFetchBooks)=>\n{\n  const allBooksQuery = graphql`\n  query actionsBooksQuery\n  {\n  viewer{\n    allBooks {\n      edges\n      {\n        node\n        {\n          id\n          title\n          description\n          author{name}\n          comments{\n            user{\n              id\n              fullname\n            }\n            comment\n            commentdate\n          }\n\n        }\n      }\n    }\n  }\n  }\n  `;\n\n\n        fetchQuery(environment,allBooksQuery)\n          .then(data => {\n            console.log(data);\n            let books=Immutable.OrderedMap();\n            data.viewer.allBooks.edges.map(({node})=>\n            {\n              books=books.set(node.id,node);\n            })\n            onFetchBooks(books);\n          });\n}\n"]},"metadata":{},"sourceType":"module"}