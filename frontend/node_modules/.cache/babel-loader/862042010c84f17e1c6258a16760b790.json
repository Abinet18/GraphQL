{"ast":null,"code":"import _objectSpread from \"/Users/abinetd/Desktop/Redux/GraphQL/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { commitMutation, graphql } from 'react-relay';\nimport { ConnectionHandler } from \"relay-runtime\";\nimport environment from '../Environment';\n\nvar mutation = function mutation() {\n  var node = require(\"./__generated__/AddCommentMutation.graphql\");\n\n  if (node.hash && node.hash !== \"edaa156a75b5938e0199c974ddd48584\") {\n    console.error(\"The definition of 'AddCommentMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\");\n  }\n\n  return require(\"./__generated__/AddCommentMutation.graphql\");\n};\n\nexport default (function (book, userid, comment) {\n  var variables = {\n    input: {\n      comment: {\n        bookid: book.id,\n        userid: userid,\n        comment: comment\n      }\n    },\n    clientMutationId: \"\"\n  };\n  var optimisticResponse = {\n    addComment: {\n      book: _objectSpread({}, book, {\n        comments: book.comments.concat({\n          user: {\n            id: userid,\n            fullname: ''\n          },\n          comment: comment,\n          commentdate: new Date()\n        })\n      })\n    }\n  };\n\n  var updater = function updater(proxyStore) {\n    var addCommentField = proxyStore.getRootField('addComment');\n    var book = addCommentField.getLinkedRecord('book');\n    if (!book) return;\n    var viewerId = 'viewer-fixed';\n    var viewerProxy = proxyStore.get(viewerId);\n    var connection = ConnectionHandler.getConnection(viewerProxy, \"BookList_allBooks\");\n\n    if (connection) {\n      console.log(\"inserting\");\n      var newEdge = ConnectionHandler.createEdge(proxyStore, connection, book, 'BookEdge');\n      ConnectionHandler.deleteNode(connection, book.id); //ConnectionHandler.insertEdgeAfter(connection,newEdge);\n    }\n  };\n\n  commitMutation(environment, {\n    mutation: mutation,\n    variables: variables,\n    onCompleted: function onCompleted(response, errors) {\n      console.log(response);\n    },\n    onError: function onError(err) {\n      return console.error(err);\n    },\n    updater: updater,\n    optimisticUpdater: updater,\n    optimisticResponse: optimisticResponse\n  });\n});","map":{"version":3,"sources":["/Users/abinetd/Desktop/Redux/GraphQL/frontend/src/mutations/AddCommentMutation.js"],"names":["commitMutation","graphql","ConnectionHandler","environment","mutation","book","userid","comment","variables","input","bookid","id","clientMutationId","optimisticResponse","addComment","comments","concat","user","fullname","commentdate","Date","updater","proxyStore","addCommentField","getRootField","getLinkedRecord","viewerId","viewerProxy","get","connection","getConnection","console","log","newEdge","createEdge","deleteNode","onCompleted","response","errors","onError","err","error","optimisticUpdater"],"mappings":";AAAA,SAAQA,cAAR,EAAwBC,OAAxB,QAAsC,aAAtC;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AACA,IAAMC,QAAQ,YAARA,QAAQ;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,CAAd;;AAuBA,gBAAe,UAACC,IAAD,EAAMC,MAAN,EAAaC,OAAb,EAAwB;AAGrC,MAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAC;AAACF,MAAAA,OAAO,EAAE;AACdG,QAAAA,MAAM,EAACL,IAAI,CAACM,EADE;AAEdL,QAAAA,MAAM,EAACA,MAFO;AAGdC,QAAAA,OAAO,EAACA;AAHM;AAAV,KADU;AAMhBK,IAAAA,gBAAgB,EAAC;AAND,GAAlB;AASA,MAAMC,kBAAkB,GAAG;AACvBC,IAAAA,UAAU,EAAE;AACVT,MAAAA,IAAI,oBACDA,IADC;AAEJU,QAAAA,QAAQ,EAACV,IAAI,CAACU,QAAL,CAAcC,MAAd,CAAqB;AAACC,UAAAA,IAAI,EAAC;AAACN,YAAAA,EAAE,EAACL,MAAJ;AAAWY,YAAAA,QAAQ,EAAC;AAApB,WAAN;AAA8BX,UAAAA,OAAO,EAACA,OAAtC;AAA8CY,UAAAA,WAAW,EAAC,IAAIC,IAAJ;AAA1D,SAArB;AAFL;AADM;AADW,GAA3B;;AASA,MAAMC,OAAO,GAAI,SAAXA,OAAW,CAACC,UAAD,EAAgB;AAE/B,QAAMC,eAAe,GAAED,UAAU,CAACE,YAAX,CAAwB,YAAxB,CAAvB;AACA,QAAMnB,IAAI,GAAEkB,eAAe,CAACE,eAAhB,CAAgC,MAAhC,CAAZ;AACA,QAAG,CAACpB,IAAJ,EAAU;AACV,QAAMqB,QAAQ,GAAC,cAAf;AACA,QAAMC,WAAW,GAACL,UAAU,CAACM,GAAX,CAAeF,QAAf,CAAlB;AAEA,QAAMG,UAAU,GAAC3B,iBAAiB,CAAC4B,aAAlB,CAAgCH,WAAhC,EAA4C,mBAA5C,CAAjB;;AACA,QAAGE,UAAH,EAAc;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAMC,OAAO,GAAC/B,iBAAiB,CAACgC,UAAlB,CAA6BZ,UAA7B,EAAwCO,UAAxC,EAAmDxB,IAAnD,EAAwD,UAAxD,CAAd;AACAH,MAAAA,iBAAiB,CAACiC,UAAlB,CAA6BN,UAA7B,EAAwCxB,IAAI,CAACM,EAA7C,EAHW,CAIX;AACF;AACF,GAfD;;AAkBAX,EAAAA,cAAc,CACZG,WADY,EAEZ;AACEC,IAAAA,QAAQ,EAARA,QADF;AAEEI,IAAAA,SAAS,EAATA,SAFF;AAGE4B,IAAAA,WAAW,EAAE,qBAACC,QAAD,EAAWC,MAAX,EAAsB;AACjCP,MAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AACD,KALH;AAMEE,IAAAA,OAAO,EAAE,iBAAAC,GAAG;AAAA,aAAIT,OAAO,CAACU,KAAR,CAAcD,GAAd,CAAJ;AAAA,KANd;AAOEnB,IAAAA,OAAO,EAACA,OAPV;AAQEqB,IAAAA,iBAAiB,EAACrB,OARpB;AASER,IAAAA,kBAAkB,EAAlBA;AATF,GAFY,CAAd;AAcD,CArDD","sourcesContent":["import {commitMutation, graphql} from 'react-relay';\nimport { ConnectionHandler } from \"relay-runtime\";\nimport environment from '../Environment';\nconst mutation = graphql`\n  mutation AddCommentMutation(\n    $input: AddCommentInput!\n  ) {\n    addComment(input:$input) {\n      book{\n        id\n        title\n        description\n        author{name}\n        comments{\n          user{\n            id\n            fullname\n          }\n          comment\n          commentdate\n        }\n    }\n  }\n  }\n  `;\n\nexport default (book,userid,comment)=> {\n\n\n  const variables = {\n    input:{comment: {\n      bookid:book.id,\n      userid:userid,\n      comment:comment,\n    }},\n    clientMutationId:\"\"\n  };\n\n  const optimisticResponse = {\n      addComment: {\n        book: {\n        ...book,\n        comments:book.comments.concat({user:{id:userid,fullname:''},comment:comment,commentdate:new Date()})\n        },\n    }\n  };\n\n  const updater =  (proxyStore) => {\n\n    const addCommentField= proxyStore.getRootField('addComment');\n    const book= addCommentField.getLinkedRecord('book');\n    if(!book) return;\n    const viewerId='viewer-fixed'\n    const viewerProxy=proxyStore.get(viewerId);\n\n    const connection=ConnectionHandler.getConnection(viewerProxy,\"BookList_allBooks\");\n    if(connection){\n       console.log(\"inserting\");\n       const newEdge=ConnectionHandler.createEdge(proxyStore,connection,book,'BookEdge');\n       ConnectionHandler.deleteNode(connection,book.id);\n       //ConnectionHandler.insertEdgeAfter(connection,newEdge);\n    }\n  };\n\n\n  commitMutation(\n    environment,\n    {\n      mutation,\n      variables,\n      onCompleted: (response, errors) => {\n        console.log(response);\n      },\n      onError: err => console.error(err),\n      updater:updater,\n      optimisticUpdater:updater,\n      optimisticResponse\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module"}